
DoorLocker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00002a7c  00002b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800140  00800140  00002bf0  2**0
                  ALLOC
  3 .stab         0000228c  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b91  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007906  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000087f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000095a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000998d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a15b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e3       	ldi	r26, 0x37	; 55
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e3       	ldi	r24, 0x37	; 55
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "uart.h"
#include"LCD.h"
#include"HML.h"

int main(void)
{                             /*INITIALIZING HARDWARES*/
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 LCD_init();
     b5a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_init>
     UART_init();
     b5e:	0e 94 14 14 	call	0x2828	; 0x2828 <UART_init>
     LCD_displayStringRowColumn(0,0," welcome osama ");
     b62:	20 e6       	ldi	r18, 0x60	; 96
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	a9 01       	movw	r20, r18
     b6c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	aa e7       	ldi	r26, 0x7A	; 122
     b76:	b4 e4       	ldi	r27, 0x44	; 68
     b78:	8b 87       	std	Y+11, r24	; 0x0b
     b7a:	9c 87       	std	Y+12, r25	; 0x0c
     b7c:	ad 87       	std	Y+13, r26	; 0x0d
     b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b80:	6b 85       	ldd	r22, Y+11	; 0x0b
     b82:	7c 85       	ldd	r23, Y+12	; 0x0c
     b84:	8d 85       	ldd	r24, Y+13	; 0x0d
     b86:	9e 85       	ldd	r25, Y+14	; 0x0e
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a e7       	ldi	r20, 0x7A	; 122
     b8e:	53 e4       	ldi	r21, 0x43	; 67
     b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	8f 83       	std	Y+7, r24	; 0x07
     b9a:	98 87       	std	Y+8, r25	; 0x08
     b9c:	a9 87       	std	Y+9, r26	; 0x09
     b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba0:	6f 81       	ldd	r22, Y+7	; 0x07
     ba2:	78 85       	ldd	r23, Y+8	; 0x08
     ba4:	89 85       	ldd	r24, Y+9	; 0x09
     ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <main+0x7c>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	9e 83       	std	Y+6, r25	; 0x06
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	3f c0       	rjmp	.+126    	; 0xc40 <main+0xfa>
	else if (__tmp > 65535)
     bc2:	6f 81       	ldd	r22, Y+7	; 0x07
     bc4:	78 85       	ldd	r23, Y+8	; 0x08
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	4c f5       	brge	.+82     	; 0xc2c <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bda:	6b 85       	ldd	r22, Y+11	; 0x0b
     bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bde:	8d 85       	ldd	r24, Y+13	; 0x0d
     be0:	9e 85       	ldd	r25, Y+14	; 0x0e
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	9e 83       	std	Y+6, r25	; 0x06
     c00:	8d 83       	std	Y+5, r24	; 0x05
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <main+0xdc>
     c04:	89 e1       	ldi	r24, 0x19	; 25
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <main+0xca>
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	9e 81       	ldd	r25, Y+6	; 0x06
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	69 f7       	brne	.-38     	; 0xc04 <main+0xbe>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2c:	6f 81       	ldd	r22, Y+7	; 0x07
     c2e:	78 85       	ldd	r23, Y+8	; 0x08
     c30:	89 85       	ldd	r24, Y+9	; 0x09
     c32:	9a 85       	ldd	r25, Y+10	; 0x0a
     c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	9e 83       	std	Y+6, r25	; 0x06
     c3e:	8d 83       	std	Y+5, r24	; 0x05
     c40:	8d 81       	ldd	r24, Y+5	; 0x05
     c42:	9e 81       	ldd	r25, Y+6	; 0x06
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <main+0x106>
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(1000);
     LCD_clearScreen();
     c54:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>
     LCD_goToRowColumn(0,0);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_goToRowColumn>
                                         /*RECEIVING PASSWORD FROM MC2*/
                          GET_password();
     c60:	0e 94 4c 06 	call	0xc98	; 0xc98 <GET_password>

	                       GAC_password(); // get password from user and send it to MC to check it
     c64:	0e 94 70 06 	call	0xce0	; 0xce0 <GAC_password>


                   LCD_displayStringRowColumn(0,0,"enter the password");
     c68:	20 e7       	ldi	r18, 0x70	; 112
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	a9 01       	movw	r20, r18
     c72:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
                     LCD_goToRowColumn(0,0);
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_goToRowColumn>
                       GASAC_password();
     c7e:	0e 94 43 08 	call	0x1086	; 0x1086 <GASAC_password>
               		UART_sendByte(open); //send the pressed key to the second MC using uart
     c82:	80 e3       	ldi	r24, 0x30	; 48
     c84:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
			                                /*Enter your password*/


while(1){

     LCD_displayStringRowColumn(0,0,"the motor should be rotated now");
     c88:	23 e8       	ldi	r18, 0x83	; 131
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	a9 01       	movw	r20, r18
     c92:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
     c96:	f8 cf       	rjmp	.-16     	; 0xc88 <main+0x142>

00000c98 <GET_password>:

                                                   /*FUNCTIONS DEFINITION*/
/************************************************************************************************************************************/

                                            /*RECEIVING PASSWORD FROM MC2 */
void GET_password(){
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62

	for(counter=0;counter<5;counter++){
     ca4:	10 92 51 01 	sts	0x0151, r1
     ca8:	12 c0       	rjmp	.+36     	; 0xcce <GET_password+0x36>

		UART_sendByte(send);  /* CONFIRMING RECEIVING PROCESS*/
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>

		Old_password[counter]=UART_recieveByte(); /*SAVING PASSWORD TO COMPARING IT LATER  */
     cb0:	80 91 51 01 	lds	r24, 0x0151
     cb4:	08 2f       	mov	r16, r24
     cb6:	10 e0       	ldi	r17, 0x00	; 0
     cb8:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
     cbc:	f8 01       	movw	r30, r16
     cbe:	ed 5a       	subi	r30, 0xAD	; 173
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	80 83       	st	Z, r24
/************************************************************************************************************************************/

                                            /*RECEIVING PASSWORD FROM MC2 */
void GET_password(){

	for(counter=0;counter<5;counter++){
     cc4:	80 91 51 01 	lds	r24, 0x0151
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	80 93 51 01 	sts	0x0151, r24
     cce:	80 91 51 01 	lds	r24, 0x0151
     cd2:	85 30       	cpi	r24, 0x05	; 5
     cd4:	50 f3       	brcs	.-44     	; 0xcaa <GET_password+0x12>

		Old_password[counter]=UART_recieveByte(); /*SAVING PASSWORD TO COMPARING IT LATER  */

	}

}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <GAC_password>:


                        /* ASK AND GET THE PASSWORD FROM THE USER TO COMPARE IT WITH THE REAL PASSWORD*/

void GAC_password(){
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	aa 97       	sbiw	r28, 0x2a	; 42
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61

	while(1){
		counter=0;
     cf4:	10 92 51 01 	sts	0x0151, r1

		LCD_displayStringRowColumn(0,0,"enter password");
     cf8:	23 ea       	ldi	r18, 0xA3	; 163
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	a9 01       	movw	r20, r18
     d02:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>

		LCD_goToRowColumn(1,0);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_goToRowColumn>


		for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
     d0e:	10 92 51 01 	sts	0x0151, r1
     d12:	8b c0       	rjmp	.+278    	; 0xe2a <GAC_password+0x14a>


			key = KeyPad_getPressedKey(); //get the pressed key
     d14:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <KeyPad_getPressedKey>
     d18:	80 93 52 01 	sts	0x0152, r24
			User_password[counter]=key;
     d1c:	80 91 51 01 	lds	r24, 0x0151
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	20 91 52 01 	lds	r18, 0x0152
     d28:	fc 01       	movw	r30, r24
     d2a:	e3 5a       	subi	r30, 0xA3	; 163
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	20 83       	st	Z, r18
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	aa ef       	ldi	r26, 0xFA	; 250
     d36:	b4 e4       	ldi	r27, 0x44	; 68
     d38:	8f a3       	std	Y+39, r24	; 0x27
     d3a:	98 a7       	std	Y+40, r25	; 0x28
     d3c:	a9 a7       	std	Y+41, r26	; 0x29
     d3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d40:	6f a1       	ldd	r22, Y+39	; 0x27
     d42:	78 a5       	ldd	r23, Y+40	; 0x28
     d44:	89 a5       	ldd	r24, Y+41	; 0x29
     d46:	9a a5       	ldd	r25, Y+42	; 0x2a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8b a3       	std	Y+35, r24	; 0x23
     d5a:	9c a3       	std	Y+36, r25	; 0x24
     d5c:	ad a3       	std	Y+37, r26	; 0x25
     d5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d60:	6b a1       	ldd	r22, Y+35	; 0x23
     d62:	7c a1       	ldd	r23, Y+36	; 0x24
     d64:	8d a1       	ldd	r24, Y+37	; 0x25
     d66:	9e a1       	ldd	r25, Y+38	; 0x26
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d74:	88 23       	and	r24, r24
     d76:	2c f4       	brge	.+10     	; 0xd82 <GAC_password+0xa2>
		__ticks = 1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9a a3       	std	Y+34, r25	; 0x22
     d7e:	89 a3       	std	Y+33, r24	; 0x21
     d80:	3f c0       	rjmp	.+126    	; 0xe00 <GAC_password+0x120>
	else if (__tmp > 65535)
     d82:	6b a1       	ldd	r22, Y+35	; 0x23
     d84:	7c a1       	ldd	r23, Y+36	; 0x24
     d86:	8d a1       	ldd	r24, Y+37	; 0x25
     d88:	9e a1       	ldd	r25, Y+38	; 0x26
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	3f ef       	ldi	r19, 0xFF	; 255
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	57 e4       	ldi	r21, 0x47	; 71
     d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d96:	18 16       	cp	r1, r24
     d98:	4c f5       	brge	.+82     	; 0xdec <GAC_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9a:	6f a1       	ldd	r22, Y+39	; 0x27
     d9c:	78 a5       	ldd	r23, Y+40	; 0x28
     d9e:	89 a5       	ldd	r24, Y+41	; 0x29
     da0:	9a a5       	ldd	r25, Y+42	; 0x2a
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	bc 01       	movw	r22, r24
     db4:	cd 01       	movw	r24, r26
     db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	9a a3       	std	Y+34, r25	; 0x22
     dc0:	89 a3       	std	Y+33, r24	; 0x21
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <GAC_password+0x102>
     dc4:	89 e1       	ldi	r24, 0x19	; 25
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	98 a3       	std	Y+32, r25	; 0x20
     dca:	8f 8f       	std	Y+31, r24	; 0x1f
     dcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dce:	98 a1       	ldd	r25, Y+32	; 0x20
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <GAC_password+0xf0>
     dd4:	98 a3       	std	Y+32, r25	; 0x20
     dd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	89 a1       	ldd	r24, Y+33	; 0x21
     dda:	9a a1       	ldd	r25, Y+34	; 0x22
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	9a a3       	std	Y+34, r25	; 0x22
     de0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de2:	89 a1       	ldd	r24, Y+33	; 0x21
     de4:	9a a1       	ldd	r25, Y+34	; 0x22
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	69 f7       	brne	.-38     	; 0xdc4 <GAC_password+0xe4>
     dea:	14 c0       	rjmp	.+40     	; 0xe14 <GAC_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	6b a1       	ldd	r22, Y+35	; 0x23
     dee:	7c a1       	ldd	r23, Y+36	; 0x24
     df0:	8d a1       	ldd	r24, Y+37	; 0x25
     df2:	9e a1       	ldd	r25, Y+38	; 0x26
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	9a a3       	std	Y+34, r25	; 0x22
     dfe:	89 a3       	std	Y+33, r24	; 0x21
     e00:	89 a1       	ldd	r24, Y+33	; 0x21
     e02:	9a a1       	ldd	r25, Y+34	; 0x22
     e04:	9e 8f       	std	Y+30, r25	; 0x1e
     e06:	8d 8f       	std	Y+29, r24	; 0x1d
     e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <GAC_password+0x12c>
     e10:	9e 8f       	std	Y+30, r25	; 0x1e
     e12:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
			LCD_intgerToString(key);// DISPLAY
     e14:	80 91 52 01 	lds	r24, 0x0152
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <LCD_intgerToString>
		LCD_displayStringRowColumn(0,0,"enter password");

		LCD_goToRowColumn(1,0);


		for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
     e20:	80 91 51 01 	lds	r24, 0x0151
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 51 01 	sts	0x0151, r24
     e2a:	80 91 51 01 	lds	r24, 0x0151
     e2e:	85 30       	cpi	r24, 0x05	; 5
     e30:	08 f4       	brcc	.+2      	; 0xe34 <GAC_password+0x154>
     e32:	70 cf       	rjmp	.-288    	; 0xd14 <GAC_password+0x34>
			User_password[counter]=key;
			_delay_ms(2000);
			LCD_intgerToString(key);// DISPLAY
		}

		LCD_clearScreen();
     e34:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>

		if((User_password[0] == Old_password[0])&&(User_password[1] == Old_password[1])&&(User_password[2] == Old_password[2])&&(User_password[3] == Old_password[3])&&(User_password[4] == Old_password[4]))
     e38:	90 91 5d 01 	lds	r25, 0x015D
     e3c:	80 91 53 01 	lds	r24, 0x0153
     e40:	98 17       	cp	r25, r24
     e42:	09 f0       	breq	.+2      	; 0xe46 <GAC_password+0x166>
     e44:	a0 c0       	rjmp	.+320    	; 0xf86 <GAC_password+0x2a6>
     e46:	90 91 5e 01 	lds	r25, 0x015E
     e4a:	80 91 54 01 	lds	r24, 0x0154
     e4e:	98 17       	cp	r25, r24
     e50:	09 f0       	breq	.+2      	; 0xe54 <GAC_password+0x174>
     e52:	99 c0       	rjmp	.+306    	; 0xf86 <GAC_password+0x2a6>
     e54:	90 91 5f 01 	lds	r25, 0x015F
     e58:	80 91 55 01 	lds	r24, 0x0155
     e5c:	98 17       	cp	r25, r24
     e5e:	09 f0       	breq	.+2      	; 0xe62 <GAC_password+0x182>
     e60:	92 c0       	rjmp	.+292    	; 0xf86 <GAC_password+0x2a6>
     e62:	90 91 60 01 	lds	r25, 0x0160
     e66:	80 91 56 01 	lds	r24, 0x0156
     e6a:	98 17       	cp	r25, r24
     e6c:	09 f0       	breq	.+2      	; 0xe70 <GAC_password+0x190>
     e6e:	8b c0       	rjmp	.+278    	; 0xf86 <GAC_password+0x2a6>
     e70:	90 91 61 01 	lds	r25, 0x0161
     e74:	80 91 57 01 	lds	r24, 0x0157
     e78:	98 17       	cp	r25, r24
     e7a:	09 f0       	breq	.+2      	; 0xe7e <GAC_password+0x19e>
     e7c:	84 c0       	rjmp	.+264    	; 0xf86 <GAC_password+0x2a6>
		{
			LCD_displayStringRowColumn(0,0,"matched");
     e7e:	22 eb       	ldi	r18, 0xB2	; 178
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	a9 01       	movw	r20, r18
     e88:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e4       	ldi	r25, 0x40	; 64
     e90:	ac e1       	ldi	r26, 0x1C	; 28
     e92:	b7 e4       	ldi	r27, 0x47	; 71
     e94:	89 8f       	std	Y+25, r24	; 0x19
     e96:	9a 8f       	std	Y+26, r25	; 0x1a
     e98:	ab 8f       	std	Y+27, r26	; 0x1b
     e9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	69 8d       	ldd	r22, Y+25	; 0x19
     e9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	53 e4       	ldi	r21, 0x43	; 67
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8d 8b       	std	Y+21, r24	; 0x15
     eb6:	9e 8b       	std	Y+22, r25	; 0x16
     eb8:	af 8b       	std	Y+23, r26	; 0x17
     eba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ebc:	6d 89       	ldd	r22, Y+21	; 0x15
     ebe:	7e 89       	ldd	r23, Y+22	; 0x16
     ec0:	8f 89       	ldd	r24, Y+23	; 0x17
     ec2:	98 8d       	ldd	r25, Y+24	; 0x18
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <GAC_password+0x1fe>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 8b       	std	Y+20, r25	; 0x14
     eda:	8b 8b       	std	Y+19, r24	; 0x13
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <GAC_password+0x27c>
	else if (__tmp > 65535)
     ede:	6d 89       	ldd	r22, Y+21	; 0x15
     ee0:	7e 89       	ldd	r23, Y+22	; 0x16
     ee2:	8f 89       	ldd	r24, Y+23	; 0x17
     ee4:	98 8d       	ldd	r25, Y+24	; 0x18
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <GAC_password+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	69 8d       	ldd	r22, Y+25	; 0x19
     ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9c 8b       	std	Y+20, r25	; 0x14
     f1c:	8b 8b       	std	Y+19, r24	; 0x13
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <GAC_password+0x25e>
     f20:	89 e1       	ldi	r24, 0x19	; 25
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9a 8b       	std	Y+18, r25	; 0x12
     f26:	89 8b       	std	Y+17, r24	; 0x11
     f28:	89 89       	ldd	r24, Y+17	; 0x11
     f2a:	9a 89       	ldd	r25, Y+18	; 0x12
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <GAC_password+0x24c>
     f30:	9a 8b       	std	Y+18, r25	; 0x12
     f32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8b 89       	ldd	r24, Y+19	; 0x13
     f36:	9c 89       	ldd	r25, Y+20	; 0x14
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9c 8b       	std	Y+20, r25	; 0x14
     f3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8b 89       	ldd	r24, Y+19	; 0x13
     f40:	9c 89       	ldd	r25, Y+20	; 0x14
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <GAC_password+0x240>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <GAC_password+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6d 89       	ldd	r22, Y+21	; 0x15
     f4a:	7e 89       	ldd	r23, Y+22	; 0x16
     f4c:	8f 89       	ldd	r24, Y+23	; 0x17
     f4e:	98 8d       	ldd	r25, Y+24	; 0x18
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9c 8b       	std	Y+20, r25	; 0x14
     f5a:	8b 8b       	std	Y+19, r24	; 0x13
     f5c:	8b 89       	ldd	r24, Y+19	; 0x13
     f5e:	9c 89       	ldd	r25, Y+20	; 0x14
     f60:	98 8b       	std	Y+16, r25	; 0x10
     f62:	8f 87       	std	Y+15, r24	; 0x0f
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	98 89       	ldd	r25, Y+16	; 0x10
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <GAC_password+0x288>
     f6c:	98 8b       	std	Y+16, r25	; 0x10
     f6e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(40000);
			LCD_clearScreen();
     f70:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>
		}

	}


}
     f74:	aa 96       	adiw	r28, 0x2a	; 42
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret
			break;

		}

		else {
			LCD_displayStringRowColumn(0,0," pass Not matched");
     f86:	2a eb       	ldi	r18, 0xBA	; 186
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e4       	ldi	r25, 0x40	; 64
     f98:	ac e1       	ldi	r26, 0x1C	; 28
     f9a:	b7 e4       	ldi	r27, 0x47	; 71
     f9c:	8b 87       	std	Y+11, r24	; 0x0b
     f9e:	9c 87       	std	Y+12, r25	; 0x0c
     fa0:	ad 87       	std	Y+13, r26	; 0x0d
     fa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
     faa:	9e 85       	ldd	r25, Y+14	; 0x0e
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4a e7       	ldi	r20, 0x7A	; 122
     fb2:	53 e4       	ldi	r21, 0x43	; 67
     fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8f 83       	std	Y+7, r24	; 0x07
     fbe:	98 87       	std	Y+8, r25	; 0x08
     fc0:	a9 87       	std	Y+9, r26	; 0x09
     fc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc4:	6f 81       	ldd	r22, Y+7	; 0x07
     fc6:	78 85       	ldd	r23, Y+8	; 0x08
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd8:	88 23       	and	r24, r24
     fda:	2c f4       	brge	.+10     	; 0xfe6 <GAC_password+0x306>
		__ticks = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	3f c0       	rjmp	.+126    	; 0x1064 <GAC_password+0x384>
	else if (__tmp > 65535)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	57 e4       	ldi	r21, 0x47	; 71
     ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	4c f5       	brge	.+82     	; 0x1050 <GAC_password+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1000:	7c 85       	ldd	r23, Y+12	; 0x0c
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <GAC_password+0x366>
    1028:	89 e1       	ldi	r24, 0x19	; 25
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	8b 83       	std	Y+3, r24	; 0x03
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <GAC_password+0x354>
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f7       	brne	.-38     	; 0x1028 <GAC_password+0x348>
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <GAC_password+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1050:	6f 81       	ldd	r22, Y+7	; 0x07
    1052:	78 85       	ldd	r23, Y+8	; 0x08
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	9a 85       	ldd	r25, Y+10	; 0x0a
    1058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <GAC_password+0x390>
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40000);
			LCD_goToRowColumn(0,0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_goToRowColumn>
			LCD_clearScreen();
    1080:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>
    1084:	37 ce       	rjmp	.-914    	; 0xcf4 <GAC_password+0x14>

00001086 <GASAC_password>:





void GASAC_password(){
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	ce 57       	subi	r28, 0x7E	; 126
    1094:	d0 40       	sbci	r29, 0x00	; 0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61

	while(1){


		LCD_displayStringRowColumn(0,0," options");
    10a0:	2c ec       	ldi	r18, 0xCC	; 204
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	a9 01       	movw	r20, r18
    10aa:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0," '+' To open");
    10ae:	25 ed       	ldi	r18, 0xD5	; 213
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2,0," '-' To change pass");
    10bc:	22 ee       	ldi	r18, 0xE2	; 226
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	a9 01       	movw	r20, r18
    10c6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e5 58       	subi	r30, 0x85	; 133
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e4       	ldi	r25, 0x40	; 64
    10d4:	ac e1       	ldi	r26, 0x1C	; 28
    10d6:	b7 e4       	ldi	r27, 0x47	; 71
    10d8:	80 83       	st	Z, r24
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	a2 83       	std	Z+2, r26	; 0x02
    10de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e0:	8e 01       	movw	r16, r28
    10e2:	09 58       	subi	r16, 0x89	; 137
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	e5 58       	subi	r30, 0x85	; 133
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	53 e4       	ldi	r21, 0x43	; 67
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	f8 01       	movw	r30, r16
    1106:	80 83       	st	Z, r24
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	a2 83       	std	Z+2, r26	; 0x02
    110c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    110e:	fe 01       	movw	r30, r28
    1110:	e9 58       	subi	r30, 0x89	; 137
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	5f e3       	ldi	r21, 0x3F	; 63
    1124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1128:	88 23       	and	r24, r24
    112a:	44 f4       	brge	.+16     	; 0x113c <GASAC_password+0xb6>
		__ticks = 1;
    112c:	fe 01       	movw	r30, r28
    112e:	eb 58       	subi	r30, 0x8B	; 139
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	64 c0       	rjmp	.+200    	; 0x1204 <GASAC_password+0x17e>
	else if (__tmp > 65535)
    113c:	fe 01       	movw	r30, r28
    113e:	e9 58       	subi	r30, 0x89	; 137
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	3f ef       	ldi	r19, 0xFF	; 255
    114e:	4f e7       	ldi	r20, 0x7F	; 127
    1150:	57 e4       	ldi	r21, 0x47	; 71
    1152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1156:	18 16       	cp	r1, r24
    1158:	0c f0       	brlt	.+2      	; 0x115c <GASAC_password+0xd6>
    115a:	43 c0       	rjmp	.+134    	; 0x11e2 <GASAC_password+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	fe 01       	movw	r30, r28
    115e:	e5 58       	subi	r30, 0x85	; 133
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	8e 01       	movw	r16, r28
    117c:	0b 58       	subi	r16, 0x8B	; 139
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	f8 01       	movw	r30, r16
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    1192:	1f c0       	rjmp	.+62     	; 0x11d2 <GASAC_password+0x14c>
    1194:	fe 01       	movw	r30, r28
    1196:	ed 58       	subi	r30, 0x8D	; 141
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	89 e1       	ldi	r24, 0x19	; 25
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
    11a2:	fe 01       	movw	r30, r28
    11a4:	ed 58       	subi	r30, 0x8D	; 141
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <GASAC_password+0x126>
    11b0:	fe 01       	movw	r30, r28
    11b2:	ed 58       	subi	r30, 0x8D	; 141
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	de 01       	movw	r26, r28
    11bc:	ab 58       	subi	r26, 0x8B	; 139
    11be:	bf 4f       	sbci	r27, 0xFF	; 255
    11c0:	fe 01       	movw	r30, r28
    11c2:	eb 58       	subi	r30, 0x8B	; 139
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	9c 93       	st	X, r25
    11d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	fe 01       	movw	r30, r28
    11d4:	eb 58       	subi	r30, 0x8B	; 139
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	d1 f6       	brne	.-76     	; 0x1194 <GASAC_password+0x10e>
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <GASAC_password+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	8e 01       	movw	r16, r28
    11e4:	0b 58       	subi	r16, 0x8B	; 139
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	fe 01       	movw	r30, r28
    11ea:	e9 58       	subi	r30, 0x89	; 137
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	de 01       	movw	r26, r28
    1206:	af 58       	subi	r26, 0x8F	; 143
    1208:	bf 4f       	sbci	r27, 0xFF	; 255
    120a:	fe 01       	movw	r30, r28
    120c:	eb 58       	subi	r30, 0x8B	; 139
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	8d 93       	st	X+, r24
    1216:	9c 93       	st	X, r25
    1218:	fe 01       	movw	r30, r28
    121a:	ef 58       	subi	r30, 0x8F	; 143
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <GASAC_password+0x19c>
    1226:	fe 01       	movw	r30, r28
    1228:	ef 58       	subi	r30, 0x8F	; 143
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24
		_delay_ms(40000);
		LCD_clearScreen();
    1230:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>

		/*OPENING DOOR OR CHANGING THE PASSWORD*/

		if(KeyPad_getPressedKey() == '-'){
    1234:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <KeyPad_getPressedKey>
    1238:	8d 32       	cpi	r24, 0x2D	; 45
    123a:	09 f0       	breq	.+2      	; 0x123e <GASAC_password+0x1b8>
    123c:	24 c5       	rjmp	.+2632   	; 0x1c86 <GASAC_password+0xc00>

			UART_sendByte(send);// tell MC2 to enter to save fuction
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>

			LCD_displayStringRowColumn(0,0,"Enter new pass");
    1244:	26 ef       	ldi	r18, 0xF6	; 246
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>

			while(1){
				LCD_displayStringRowColumn(1,0,"enter it ");
    1252:	25 e0       	ldi	r18, 0x05	; 5
    1254:	31 e0       	ldi	r19, 0x01	; 1
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
    1260:	fe 01       	movw	r30, r28
    1262:	e3 59       	subi	r30, 0x93	; 147
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e4       	ldi	r25, 0x40	; 64
    126a:	ac e9       	ldi	r26, 0x9C	; 156
    126c:	b5 e4       	ldi	r27, 0x45	; 69
    126e:	80 83       	st	Z, r24
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	a2 83       	std	Z+2, r26	; 0x02
    1274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1276:	8e 01       	movw	r16, r28
    1278:	07 59       	subi	r16, 0x97	; 151
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	fe 01       	movw	r30, r28
    127e:	e3 59       	subi	r30, 0x93	; 147
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4a e7       	ldi	r20, 0x7A	; 122
    1290:	53 e4       	ldi	r21, 0x43	; 67
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	f8 01       	movw	r30, r16
    129c:	80 83       	st	Z, r24
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	a2 83       	std	Z+2, r26	; 0x02
    12a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a4:	fe 01       	movw	r30, r28
    12a6:	e7 59       	subi	r30, 0x97	; 151
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	44 f4       	brge	.+16     	; 0x12d2 <GASAC_password+0x24c>
		__ticks = 1;
    12c2:	fe 01       	movw	r30, r28
    12c4:	e9 59       	subi	r30, 0x99	; 153
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
    12d0:	64 c0       	rjmp	.+200    	; 0x139a <GASAC_password+0x314>
	else if (__tmp > 65535)
    12d2:	fe 01       	movw	r30, r28
    12d4:	e7 59       	subi	r30, 0x97	; 151
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <GASAC_password+0x26c>
    12f0:	43 c0       	rjmp	.+134    	; 0x1378 <GASAC_password+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	fe 01       	movw	r30, r28
    12f4:	e3 59       	subi	r30, 0x93	; 147
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e2       	ldi	r20, 0x20	; 32
    1306:	51 e4       	ldi	r21, 0x41	; 65
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8e 01       	movw	r16, r28
    1312:	09 59       	subi	r16, 0x99	; 153
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	f8 01       	movw	r30, r16
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	1f c0       	rjmp	.+62     	; 0x1368 <GASAC_password+0x2e2>
    132a:	fe 01       	movw	r30, r28
    132c:	eb 59       	subi	r30, 0x9B	; 155
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	89 e1       	ldi	r24, 0x19	; 25
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
    1338:	fe 01       	movw	r30, r28
    133a:	eb 59       	subi	r30, 0x9B	; 155
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <GASAC_password+0x2bc>
    1346:	fe 01       	movw	r30, r28
    1348:	eb 59       	subi	r30, 0x9B	; 155
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	de 01       	movw	r26, r28
    1352:	a9 59       	subi	r26, 0x99	; 153
    1354:	bf 4f       	sbci	r27, 0xFF	; 255
    1356:	fe 01       	movw	r30, r28
    1358:	e9 59       	subi	r30, 0x99	; 153
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	9c 93       	st	X, r25
    1366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	fe 01       	movw	r30, r28
    136a:	e9 59       	subi	r30, 0x99	; 153
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	d1 f6       	brne	.-76     	; 0x132a <GASAC_password+0x2a4>
    1376:	27 c0       	rjmp	.+78     	; 0x13c6 <GASAC_password+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1378:	8e 01       	movw	r16, r28
    137a:	09 59       	subi	r16, 0x99	; 153
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	fe 01       	movw	r30, r28
    1380:	e7 59       	subi	r30, 0x97	; 151
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	f8 01       	movw	r30, r16
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
    139a:	de 01       	movw	r26, r28
    139c:	ad 59       	subi	r26, 0x9D	; 157
    139e:	bf 4f       	sbci	r27, 0xFF	; 255
    13a0:	fe 01       	movw	r30, r28
    13a2:	e9 59       	subi	r30, 0x99	; 153
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	8d 93       	st	X+, r24
    13ac:	9c 93       	st	X, r25
    13ae:	fe 01       	movw	r30, r28
    13b0:	ed 59       	subi	r30, 0x9D	; 157
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <GASAC_password+0x332>
    13bc:	fe 01       	movw	r30, r28
    13be:	ed 59       	subi	r30, 0x9D	; 157
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
				_delay_ms(5000);
				LCD_goToRowColumn(2,0);
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_goToRowColumn>
				LCD_clearScreen();
    13ce:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>



				for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
    13d2:	10 92 51 01 	sts	0x0151, r1
    13d6:	cc c0       	rjmp	.+408    	; 0x1570 <GASAC_password+0x4ea>
					key = KeyPad_getPressedKey(); //get the pressed key
    13d8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <KeyPad_getPressedKey>
    13dc:	80 93 52 01 	sts	0x0152, r24
    13e0:	fe 01       	movw	r30, r28
    13e2:	e1 5a       	subi	r30, 0xA1	; 161
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	aa ef       	ldi	r26, 0xFA	; 250
    13ec:	b4 e4       	ldi	r27, 0x44	; 68
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	a2 83       	std	Z+2, r26	; 0x02
    13f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	8e 01       	movw	r16, r28
    13f8:	05 5a       	subi	r16, 0xA5	; 165
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e1 5a       	subi	r30, 0xA1	; 161
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a e7       	ldi	r20, 0x7A	; 122
    1410:	53 e4       	ldi	r21, 0x43	; 67
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	80 83       	st	Z, r24
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	a2 83       	std	Z+2, r26	; 0x02
    1422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1424:	fe 01       	movw	r30, r28
    1426:	e5 5a       	subi	r30, 0xA5	; 165
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	44 f4       	brge	.+16     	; 0x1452 <GASAC_password+0x3cc>
		__ticks = 1;
    1442:	fe 01       	movw	r30, r28
    1444:	e7 5a       	subi	r30, 0xA7	; 167
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	64 c0       	rjmp	.+200    	; 0x151a <GASAC_password+0x494>
	else if (__tmp > 65535)
    1452:	fe 01       	movw	r30, r28
    1454:	e5 5a       	subi	r30, 0xA5	; 165
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	0c f0       	brlt	.+2      	; 0x1472 <GASAC_password+0x3ec>
    1470:	43 c0       	rjmp	.+134    	; 0x14f8 <GASAC_password+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	fe 01       	movw	r30, r28
    1474:	e1 5a       	subi	r30, 0xA1	; 161
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e2       	ldi	r20, 0x20	; 32
    1486:	51 e4       	ldi	r21, 0x41	; 65
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8e 01       	movw	r16, r28
    1492:	07 5a       	subi	r16, 0xA7	; 167
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f8 01       	movw	r30, r16
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	1f c0       	rjmp	.+62     	; 0x14e8 <GASAC_password+0x462>
    14aa:	fe 01       	movw	r30, r28
    14ac:	e9 5a       	subi	r30, 0xA9	; 169
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	fe 01       	movw	r30, r28
    14ba:	e9 5a       	subi	r30, 0xA9	; 169
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <GASAC_password+0x43c>
    14c6:	fe 01       	movw	r30, r28
    14c8:	e9 5a       	subi	r30, 0xA9	; 169
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	de 01       	movw	r26, r28
    14d2:	a7 5a       	subi	r26, 0xA7	; 167
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	e7 5a       	subi	r30, 0xA7	; 167
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	fe 01       	movw	r30, r28
    14ea:	e7 5a       	subi	r30, 0xA7	; 167
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	d1 f6       	brne	.-76     	; 0x14aa <GASAC_password+0x424>
    14f6:	27 c0       	rjmp	.+78     	; 0x1546 <GASAC_password+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	8e 01       	movw	r16, r28
    14fa:	07 5a       	subi	r16, 0xA7	; 167
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	e5 5a       	subi	r30, 0xA5	; 165
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	f8 01       	movw	r30, r16
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	de 01       	movw	r26, r28
    151c:	ab 5a       	subi	r26, 0xAB	; 171
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	e7 5a       	subi	r30, 0xA7	; 167
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	8d 93       	st	X+, r24
    152c:	9c 93       	st	X, r25
    152e:	fe 01       	movw	r30, r28
    1530:	eb 5a       	subi	r30, 0xAB	; 171
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <GASAC_password+0x4b2>
    153c:	fe 01       	movw	r30, r28
    153e:	eb 5a       	subi	r30, 0xAB	; 171
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
					_delay_ms(2000);
					LCD_intgerToString(key);// DISPLAY
    1546:	80 91 52 01 	lds	r24, 0x0152
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <LCD_intgerToString>
					Old_password[counter]=key;
    1552:	80 91 51 01 	lds	r24, 0x0151
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	20 91 52 01 	lds	r18, 0x0152
    155e:	fc 01       	movw	r30, r24
    1560:	ed 5a       	subi	r30, 0xAD	; 173
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	20 83       	st	Z, r18
				LCD_goToRowColumn(2,0);
				LCD_clearScreen();



				for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
    1566:	80 91 51 01 	lds	r24, 0x0151
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 93 51 01 	sts	0x0151, r24
    1570:	80 91 51 01 	lds	r24, 0x0151
    1574:	85 30       	cpi	r24, 0x05	; 5
    1576:	08 f4       	brcc	.+2      	; 0x157a <GASAC_password+0x4f4>
    1578:	2f cf       	rjmp	.-418    	; 0x13d8 <GASAC_password+0x352>
					Old_password[counter]=key;
				}



				for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
    157a:	10 92 51 01 	sts	0x0151, r1
    157e:	13 c0       	rjmp	.+38     	; 0x15a6 <GASAC_password+0x520>

					while(UART_recieveByte() != send){}
    1580:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    1584:	80 32       	cpi	r24, 0x20	; 32
    1586:	e1 f7       	brne	.-8      	; 0x1580 <GASAC_password+0x4fa>
					UART_sendByte(Old_password[counter]); //send the pressed key to the second MC using uart
    1588:	80 91 51 01 	lds	r24, 0x0151
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	fc 01       	movw	r30, r24
    1592:	ed 5a       	subi	r30, 0xAD	; 173
    1594:	fe 4f       	sbci	r31, 0xFE	; 254
    1596:	80 81       	ld	r24, Z
    1598:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
					Old_password[counter]=key;
				}



				for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
    159c:	80 91 51 01 	lds	r24, 0x0151
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	80 93 51 01 	sts	0x0151, r24
    15a6:	80 91 51 01 	lds	r24, 0x0151
    15aa:	85 30       	cpi	r24, 0x05	; 5
    15ac:	48 f3       	brcs	.-46     	; 0x1580 <GASAC_password+0x4fa>


				//UART_sendByte(send); //send the pressed key to the second MC using uart


				LCD_displayStringRowColumn(0,0,"re enter it ");
    15ae:	2f e0       	ldi	r18, 0x0F	; 15
    15b0:	31 e0       	ldi	r19, 0x01	; 1
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	a9 01       	movw	r20, r18
    15b8:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
    15bc:	fe 01       	movw	r30, r28
    15be:	ef 5a       	subi	r30, 0xAF	; 175
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e4       	ldi	r25, 0x40	; 64
    15c6:	ac e9       	ldi	r26, 0x9C	; 156
    15c8:	b5 e4       	ldi	r27, 0x45	; 69
    15ca:	80 83       	st	Z, r24
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	a2 83       	std	Z+2, r26	; 0x02
    15d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	8e 01       	movw	r16, r28
    15d4:	03 5b       	subi	r16, 0xB3	; 179
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	fe 01       	movw	r30, r28
    15da:	ef 5a       	subi	r30, 0xAF	; 175
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	53 e4       	ldi	r21, 0x43	; 67
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1600:	fe 01       	movw	r30, r28
    1602:	e3 5b       	subi	r30, 0xB3	; 179
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	44 f4       	brge	.+16     	; 0x162e <GASAC_password+0x5a8>
		__ticks = 1;
    161e:	fe 01       	movw	r30, r28
    1620:	e5 5b       	subi	r30, 0xB5	; 181
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	80 83       	st	Z, r24
    162c:	64 c0       	rjmp	.+200    	; 0x16f6 <GASAC_password+0x670>
	else if (__tmp > 65535)
    162e:	fe 01       	movw	r30, r28
    1630:	e3 5b       	subi	r30, 0xB3	; 179
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	3f ef       	ldi	r19, 0xFF	; 255
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	57 e4       	ldi	r21, 0x47	; 71
    1644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1648:	18 16       	cp	r1, r24
    164a:	0c f0       	brlt	.+2      	; 0x164e <GASAC_password+0x5c8>
    164c:	43 c0       	rjmp	.+134    	; 0x16d4 <GASAC_password+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164e:	fe 01       	movw	r30, r28
    1650:	ef 5a       	subi	r30, 0xAF	; 175
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8e 01       	movw	r16, r28
    166e:	05 5b       	subi	r16, 0xB5	; 181
    1670:	1f 4f       	sbci	r17, 0xFF	; 255
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	f8 01       	movw	r30, r16
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
    1684:	1f c0       	rjmp	.+62     	; 0x16c4 <GASAC_password+0x63e>
    1686:	fe 01       	movw	r30, r28
    1688:	e7 5b       	subi	r30, 0xB7	; 183
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	89 e1       	ldi	r24, 0x19	; 25
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	fe 01       	movw	r30, r28
    1696:	e7 5b       	subi	r30, 0xB7	; 183
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <GASAC_password+0x618>
    16a2:	fe 01       	movw	r30, r28
    16a4:	e7 5b       	subi	r30, 0xB7	; 183
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	de 01       	movw	r26, r28
    16ae:	a5 5b       	subi	r26, 0xB5	; 181
    16b0:	bf 4f       	sbci	r27, 0xFF	; 255
    16b2:	fe 01       	movw	r30, r28
    16b4:	e5 5b       	subi	r30, 0xB5	; 181
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	9c 93       	st	X, r25
    16c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	fe 01       	movw	r30, r28
    16c6:	e5 5b       	subi	r30, 0xB5	; 181
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	d1 f6       	brne	.-76     	; 0x1686 <GASAC_password+0x600>
    16d2:	27 c0       	rjmp	.+78     	; 0x1722 <GASAC_password+0x69c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d4:	8e 01       	movw	r16, r28
    16d6:	05 5b       	subi	r16, 0xB5	; 181
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	e3 5b       	subi	r30, 0xB3	; 179
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	f8 01       	movw	r30, r16
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
    16f6:	de 01       	movw	r26, r28
    16f8:	a9 5b       	subi	r26, 0xB9	; 185
    16fa:	bf 4f       	sbci	r27, 0xFF	; 255
    16fc:	fe 01       	movw	r30, r28
    16fe:	e5 5b       	subi	r30, 0xB5	; 181
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	8d 93       	st	X+, r24
    1708:	9c 93       	st	X, r25
    170a:	fe 01       	movw	r30, r28
    170c:	e9 5b       	subi	r30, 0xB9	; 185
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <GASAC_password+0x68e>
    1718:	fe 01       	movw	r30, r28
    171a:	e9 5b       	subi	r30, 0xB9	; 185
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
				_delay_ms(5000);
				LCD_clearScreen();
    1722:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>



				//////////Note here you must use Enter buttton to get out of the loops

				for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
    1726:	10 92 51 01 	sts	0x0151, r1
    172a:	9e c0       	rjmp	.+316    	; 0x1868 <GASAC_password+0x7e2>

					key = KeyPad_getPressedKey(); //get the pressed key
    172c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <KeyPad_getPressedKey>
    1730:	80 93 52 01 	sts	0x0152, r24

					LCD_intgerToString(key);// DISPLAY
    1734:	80 91 52 01 	lds	r24, 0x0152
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <LCD_intgerToString>
    1740:	fe 01       	movw	r30, r28
    1742:	ed 5b       	subi	r30, 0xBD	; 189
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	aa ef       	ldi	r26, 0xFA	; 250
    174c:	b4 e4       	ldi	r27, 0x44	; 68
    174e:	80 83       	st	Z, r24
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	a2 83       	std	Z+2, r26	; 0x02
    1754:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	8e 01       	movw	r16, r28
    1758:	01 5c       	subi	r16, 0xC1	; 193
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	ed 5b       	subi	r30, 0xBD	; 189
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a e7       	ldi	r20, 0x7A	; 122
    1770:	53 e4       	ldi	r21, 0x43	; 67
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	f8 01       	movw	r30, r16
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1784:	fe 01       	movw	r30, r28
    1786:	ff 96       	adiw	r30, 0x3f	; 63
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <GASAC_password+0x724>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e af       	std	Y+62, r25	; 0x3e
    17a6:	8d af       	std	Y+61, r24	; 0x3d
    17a8:	46 c0       	rjmp	.+140    	; 0x1836 <GASAC_password+0x7b0>
	else if (__tmp > 65535)
    17aa:	fe 01       	movw	r30, r28
    17ac:	ff 96       	adiw	r30, 0x3f	; 63
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	64 f5       	brge	.+88     	; 0x181e <GASAC_password+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	fe 01       	movw	r30, r28
    17c8:	ed 5b       	subi	r30, 0xBD	; 189
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e af       	std	Y+62, r25	; 0x3e
    17f2:	8d af       	std	Y+61, r24	; 0x3d
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <GASAC_password+0x78e>
    17f6:	89 e1       	ldi	r24, 0x19	; 25
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c af       	std	Y+60, r25	; 0x3c
    17fc:	8b af       	std	Y+59, r24	; 0x3b
    17fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1800:	9c ad       	ldd	r25, Y+60	; 0x3c
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <GASAC_password+0x77c>
    1806:	9c af       	std	Y+60, r25	; 0x3c
    1808:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d ad       	ldd	r24, Y+61	; 0x3d
    180c:	9e ad       	ldd	r25, Y+62	; 0x3e
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e af       	std	Y+62, r25	; 0x3e
    1812:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d ad       	ldd	r24, Y+61	; 0x3d
    1816:	9e ad       	ldd	r25, Y+62	; 0x3e
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <GASAC_password+0x770>
    181c:	16 c0       	rjmp	.+44     	; 0x184a <GASAC_password+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	fe 01       	movw	r30, r28
    1820:	ff 96       	adiw	r30, 0x3f	; 63
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e af       	std	Y+62, r25	; 0x3e
    1834:	8d af       	std	Y+61, r24	; 0x3d
    1836:	8d ad       	ldd	r24, Y+61	; 0x3d
    1838:	9e ad       	ldd	r25, Y+62	; 0x3e
    183a:	9a af       	std	Y+58, r25	; 0x3a
    183c:	89 af       	std	Y+57, r24	; 0x39
    183e:	89 ad       	ldd	r24, Y+57	; 0x39
    1840:	9a ad       	ldd	r25, Y+58	; 0x3a
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <GASAC_password+0x7bc>
    1846:	9a af       	std	Y+58, r25	; 0x3a
    1848:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2000);
					New_password[counter]=key;
    184a:	80 91 51 01 	lds	r24, 0x0151
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	20 91 52 01 	lds	r18, 0x0152
    1856:	fc 01       	movw	r30, r24
    1858:	e8 5a       	subi	r30, 0xA8	; 168
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	20 83       	st	Z, r18



				//////////Note here you must use Enter buttton to get out of the loops

				for(counter=0;counter<5;counter++){  // SENDING THE PASSWORD USING UART
    185e:	80 91 51 01 	lds	r24, 0x0151
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	80 93 51 01 	sts	0x0151, r24
    1868:	80 91 51 01 	lds	r24, 0x0151
    186c:	85 30       	cpi	r24, 0x05	; 5
    186e:	08 f4       	brcc	.+2      	; 0x1872 <GASAC_password+0x7ec>
    1870:	5d cf       	rjmp	.-326    	; 0x172c <GASAC_password+0x6a6>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e4       	ldi	r25, 0x40	; 64
    1876:	ac e9       	ldi	r26, 0x9C	; 156
    1878:	b5 e4       	ldi	r27, 0x45	; 69
    187a:	8d ab       	std	Y+53, r24	; 0x35
    187c:	9e ab       	std	Y+54, r25	; 0x36
    187e:	af ab       	std	Y+55, r26	; 0x37
    1880:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	6d a9       	ldd	r22, Y+53	; 0x35
    1884:	7e a9       	ldd	r23, Y+54	; 0x36
    1886:	8f a9       	ldd	r24, Y+55	; 0x37
    1888:	98 ad       	ldd	r25, Y+56	; 0x38
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	53 e4       	ldi	r21, 0x43	; 67
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	89 ab       	std	Y+49, r24	; 0x31
    189c:	9a ab       	std	Y+50, r25	; 0x32
    189e:	ab ab       	std	Y+51, r26	; 0x33
    18a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18a2:	69 a9       	ldd	r22, Y+49	; 0x31
    18a4:	7a a9       	ldd	r23, Y+50	; 0x32
    18a6:	8b a9       	ldd	r24, Y+51	; 0x33
    18a8:	9c a9       	ldd	r25, Y+52	; 0x34
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <GASAC_password+0x83e>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	98 ab       	std	Y+48, r25	; 0x30
    18c0:	8f a7       	std	Y+47, r24	; 0x2f
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <GASAC_password+0x8bc>
	else if (__tmp > 65535)
    18c4:	69 a9       	ldd	r22, Y+49	; 0x31
    18c6:	7a a9       	ldd	r23, Y+50	; 0x32
    18c8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ca:	9c a9       	ldd	r25, Y+52	; 0x34
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <GASAC_password+0x8a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	6d a9       	ldd	r22, Y+53	; 0x35
    18de:	7e a9       	ldd	r23, Y+54	; 0x36
    18e0:	8f a9       	ldd	r24, Y+55	; 0x37
    18e2:	98 ad       	ldd	r25, Y+56	; 0x38
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <GASAC_password+0x89e>
    1906:	89 e1       	ldi	r24, 0x19	; 25
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9e a7       	std	Y+46, r25	; 0x2e
    190c:	8d a7       	std	Y+45, r24	; 0x2d
    190e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1910:	9e a5       	ldd	r25, Y+46	; 0x2e
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <GASAC_password+0x88c>
    1916:	9e a7       	std	Y+46, r25	; 0x2e
    1918:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8f a5       	ldd	r24, Y+47	; 0x2f
    191c:	98 a9       	ldd	r25, Y+48	; 0x30
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	98 ab       	std	Y+48, r25	; 0x30
    1922:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8f a5       	ldd	r24, Y+47	; 0x2f
    1926:	98 a9       	ldd	r25, Y+48	; 0x30
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <GASAC_password+0x880>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <GASAC_password+0x8d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	69 a9       	ldd	r22, Y+49	; 0x31
    1930:	7a a9       	ldd	r23, Y+50	; 0x32
    1932:	8b a9       	ldd	r24, Y+51	; 0x33
    1934:	9c a9       	ldd	r25, Y+52	; 0x34
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	8f a5       	ldd	r24, Y+47	; 0x2f
    1944:	98 a9       	ldd	r25, Y+48	; 0x30
    1946:	9c a7       	std	Y+44, r25	; 0x2c
    1948:	8b a7       	std	Y+43, r24	; 0x2b
    194a:	8b a5       	ldd	r24, Y+43	; 0x2b
    194c:	9c a5       	ldd	r25, Y+44	; 0x2c
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <GASAC_password+0x8c8>
    1952:	9c a7       	std	Y+44, r25	; 0x2c
    1954:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2000);
					New_password[counter]=key;

				}
				_delay_ms(5000);
				LCD_clearScreen();
    1956:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>

				/*CHEACKING THE FIRST PASSWORD WITH THE SECOND PASSWORD*/
				if((Old_password[0] == New_password[0])&& (Old_password[1] == New_password[1])&& (Old_password[2] == New_password[2]) && (Old_password[3] == New_password[3])&& (Old_password[4] == New_password[4])){
    195a:	90 91 53 01 	lds	r25, 0x0153
    195e:	80 91 58 01 	lds	r24, 0x0158
    1962:	98 17       	cp	r25, r24
    1964:	09 f0       	breq	.+2      	; 0x1968 <GASAC_password+0x8e2>
    1966:	9a c0       	rjmp	.+308    	; 0x1a9c <GASAC_password+0xa16>
    1968:	90 91 54 01 	lds	r25, 0x0154
    196c:	80 91 59 01 	lds	r24, 0x0159
    1970:	98 17       	cp	r25, r24
    1972:	09 f0       	breq	.+2      	; 0x1976 <GASAC_password+0x8f0>
    1974:	93 c0       	rjmp	.+294    	; 0x1a9c <GASAC_password+0xa16>
    1976:	90 91 55 01 	lds	r25, 0x0155
    197a:	80 91 5a 01 	lds	r24, 0x015A
    197e:	98 17       	cp	r25, r24
    1980:	09 f0       	breq	.+2      	; 0x1984 <GASAC_password+0x8fe>
    1982:	8c c0       	rjmp	.+280    	; 0x1a9c <GASAC_password+0xa16>
    1984:	90 91 56 01 	lds	r25, 0x0156
    1988:	80 91 5b 01 	lds	r24, 0x015B
    198c:	98 17       	cp	r25, r24
    198e:	09 f0       	breq	.+2      	; 0x1992 <GASAC_password+0x90c>
    1990:	85 c0       	rjmp	.+266    	; 0x1a9c <GASAC_password+0xa16>
    1992:	90 91 57 01 	lds	r25, 0x0157
    1996:	80 91 5c 01 	lds	r24, 0x015C
    199a:	98 17       	cp	r25, r24
    199c:	09 f0       	breq	.+2      	; 0x19a0 <GASAC_password+0x91a>
    199e:	7e c0       	rjmp	.+252    	; 0x1a9c <GASAC_password+0xa16>

					LCD_displayStringRowColumn(1,0,"matched");
    19a0:	22 eb       	ldi	r18, 0xB2	; 178
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	a9 01       	movw	r20, r18
    19aa:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e4       	ldi	r25, 0x40	; 64
    19b2:	ac e1       	ldi	r26, 0x1C	; 28
    19b4:	b6 e4       	ldi	r27, 0x46	; 70
    19b6:	8f a3       	std	Y+39, r24	; 0x27
    19b8:	98 a7       	std	Y+40, r25	; 0x28
    19ba:	a9 a7       	std	Y+41, r26	; 0x29
    19bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	6f a1       	ldd	r22, Y+39	; 0x27
    19c0:	78 a5       	ldd	r23, Y+40	; 0x28
    19c2:	89 a5       	ldd	r24, Y+41	; 0x29
    19c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a e7       	ldi	r20, 0x7A	; 122
    19cc:	53 e4       	ldi	r21, 0x43	; 67
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8b a3       	std	Y+35, r24	; 0x23
    19d8:	9c a3       	std	Y+36, r25	; 0x24
    19da:	ad a3       	std	Y+37, r26	; 0x25
    19dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19de:	6b a1       	ldd	r22, Y+35	; 0x23
    19e0:	7c a1       	ldd	r23, Y+36	; 0x24
    19e2:	8d a1       	ldd	r24, Y+37	; 0x25
    19e4:	9e a1       	ldd	r25, Y+38	; 0x26
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <GASAC_password+0x97a>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <GASAC_password+0x9f8>
	else if (__tmp > 65535)
    1a00:	6b a1       	ldd	r22, Y+35	; 0x23
    1a02:	7c a1       	ldd	r23, Y+36	; 0x24
    1a04:	8d a1       	ldd	r24, Y+37	; 0x25
    1a06:	9e a1       	ldd	r25, Y+38	; 0x26
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <GASAC_password+0x9e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	6f a1       	ldd	r22, Y+39	; 0x27
    1a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a3       	std	Y+33, r24	; 0x21
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <GASAC_password+0x9da>
    1a42:	89 e1       	ldi	r24, 0x19	; 25
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	98 a3       	std	Y+32, r25	; 0x20
    1a48:	8f 8f       	std	Y+31, r24	; 0x1f
    1a4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a4c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <GASAC_password+0x9c8>
    1a52:	98 a3       	std	Y+32, r25	; 0x20
    1a54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	89 a1       	ldd	r24, Y+33	; 0x21
    1a58:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	9a a1       	ldd	r25, Y+34	; 0x22
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <GASAC_password+0x9bc>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <GASAC_password+0xa0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a70:	9e a1       	ldd	r25, Y+38	; 0x26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9a a3       	std	Y+34, r25	; 0x22
    1a7c:	89 a3       	std	Y+33, r24	; 0x21
    1a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a80:	9a a1       	ldd	r25, Y+34	; 0x22
    1a82:	9e 8f       	std	Y+30, r25	; 0x1e
    1a84:	8d 8f       	std	Y+29, r24	; 0x1d
    1a86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <GASAC_password+0xa04>
    1a8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a90:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(10000);
					LCD_clearScreen();
    1a92:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>


					GAC_password();
    1a96:	0e 94 70 06 	call	0xce0	; 0xce0 <GAC_password>
    1a9a:	02 cb       	rjmp	.-2556   	; 0x10a0 <GASAC_password+0x1a>

					break;
				}

				else {
					LCD_displayStringRowColumn(1,0,"Not matched");
    1a9c:	2c e1       	ldi	r18, 0x1C	; 28
    1a9e:	31 e0       	ldi	r19, 0x01	; 1
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e4       	ldi	r25, 0x40	; 64
    1aae:	ac e1       	ldi	r26, 0x1C	; 28
    1ab0:	b6 e4       	ldi	r27, 0x46	; 70
    1ab2:	89 8f       	std	Y+25, r24	; 0x19
    1ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	69 8d       	ldd	r22, Y+25	; 0x19
    1abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a e7       	ldi	r20, 0x7A	; 122
    1ac8:	53 e4       	ldi	r21, 0x43	; 67
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8d 8b       	std	Y+21, r24	; 0x15
    1ad4:	9e 8b       	std	Y+22, r25	; 0x16
    1ad6:	af 8b       	std	Y+23, r26	; 0x17
    1ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <GASAC_password+0xa76>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <GASAC_password+0xaf4>
	else if (__tmp > 65535)
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <GASAC_password+0xae0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	69 8d       	ldd	r22, Y+25	; 0x19
    1b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <GASAC_password+0xad6>
    1b3e:	89 e1       	ldi	r24, 0x19	; 25
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a 8b       	std	Y+18, r25	; 0x12
    1b44:	89 8b       	std	Y+17, r24	; 0x11
    1b46:	89 89       	ldd	r24, Y+17	; 0x11
    1b48:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <GASAC_password+0xac4>
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <GASAC_password+0xab8>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <GASAC_password+0xb08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	98 8b       	std	Y+16, r25	; 0x10
    1b80:	8f 87       	std	Y+15, r24	; 0x0f
    1b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b84:	98 89       	ldd	r25, Y+16	; 0x10
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <GASAC_password+0xb00>
    1b8a:	98 8b       	std	Y+16, r25	; 0x10
    1b8c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10000);
					LCD_displayStringRowColumn(2,0,"enter it again");
    1b8e:	28 e2       	ldi	r18, 0x28	; 40
    1b90:	31 e0       	ldi	r19, 0x01	; 1
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_displayStringRowColumn>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e4       	ldi	r25, 0x40	; 64
    1ba0:	ac e1       	ldi	r26, 0x1C	; 28
    1ba2:	b6 e4       	ldi	r27, 0x46	; 70
    1ba4:	8b 87       	std	Y+11, r24	; 0x0b
    1ba6:	9c 87       	std	Y+12, r25	; 0x0c
    1ba8:	ad 87       	std	Y+13, r26	; 0x0d
    1baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8f 83       	std	Y+7, r24	; 0x07
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	a9 87       	std	Y+9, r26	; 0x09
    1bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <GASAC_password+0xb68>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <GASAC_password+0xbe6>
	else if (__tmp > 65535)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <GASAC_password+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <GASAC_password+0xbc8>
    1c30:	89 e1       	ldi	r24, 0x19	; 25
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <GASAC_password+0xbb6>
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <GASAC_password+0xbaa>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <GASAC_password+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <GASAC_password+0xbf2>
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(10000);
					LCD_clearScreen();
    1c80:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_clearScreen>
    1c84:	e6 ca       	rjmp	.-2612   	; 0x1252 <GASAC_password+0x1cc>



		else {

			UART_sendByte(open); // enter the password Directiy
    1c86:	80 e3       	ldi	r24, 0x30	; 48
    1c88:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>

		}

	}

}                          //END OF FUNCTION
    1c8c:	c2 58       	subi	r28, 0x82	; 130
    1c8e:	df 4f       	sbci	r29, 0xFF	; 255
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	08 95       	ret

00001ca4 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <KeyPad_getPressedKey+0x6>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1cae:	1a 82       	std	Y+2, r1	; 0x02
    1cb0:	4c c0       	rjmp	.+152    	; 0x1d4a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1cb2:	ea e3       	ldi	r30, 0x3A	; 58
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	80 e1       	ldi	r24, 0x10	; 16
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <KeyPad_getPressedKey+0x22>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	2a 95       	dec	r18
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <KeyPad_getPressedKey+0x1e>
    1cca:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1ccc:	eb e3       	ldi	r30, 0x3B	; 59
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	80 e1       	ldi	r24, 0x10	; 16
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 2e       	mov	r0, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <KeyPad_getPressedKey+0x3e>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	0a 94       	dec	r0
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <KeyPad_getPressedKey+0x3a>
    1ce6:	80 95       	com	r24
    1ce8:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1cea:	19 82       	std	Y+1, r1	; 0x01
    1cec:	28 c0       	rjmp	.+80     	; 0x1d3e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1cee:	e9 e3       	ldi	r30, 0x39	; 57
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a9 01       	movw	r20, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <KeyPad_getPressedKey+0x62>
    1d02:	55 95       	asr	r21
    1d04:	47 95       	ror	r20
    1d06:	8a 95       	dec	r24
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <KeyPad_getPressedKey+0x5e>
    1d0a:	ca 01       	movw	r24, r20
    1d0c:	81 70       	andi	r24, 0x01	; 1
    1d0e:	90 70       	andi	r25, 0x00	; 0
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	91 f4       	brne	.+36     	; 0x1d38 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	98 2f       	mov	r25, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	89 0f       	add	r24, r25
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	a8 f2       	brcs	.-86     	; 0x1cee <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	84 30       	cpi	r24, 0x04	; 4
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <KeyPad_getPressedKey+0xae>
    1d50:	b0 cf       	rjmp	.-160    	; 0x1cb2 <KeyPad_getPressedKey+0xe>
    1d52:	ad cf       	rjmp	.-166    	; 0x1cae <KeyPad_getPressedKey+0xa>

00001d54 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <KeyPad_4x4_adjustKeyNumber+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <KeyPad_4x4_adjustKeyNumber+0x8>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3c 83       	std	Y+4, r19	; 0x04
    1d6a:	2b 83       	std	Y+3, r18	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	88 30       	cpi	r24, 0x08	; 8
    1d72:	91 05       	cpc	r25, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <KeyPad_4x4_adjustKeyNumber+0x24>
    1d76:	70 c0       	rjmp	.+224    	; 0x1e58 <KeyPad_4x4_adjustKeyNumber+0x104>
    1d78:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7c:	29 30       	cpi	r18, 0x09	; 9
    1d7e:	31 05       	cpc	r19, r1
    1d80:	5c f5       	brge	.+86     	; 0x1dd8 <KeyPad_4x4_adjustKeyNumber+0x84>
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	84 30       	cpi	r24, 0x04	; 4
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <KeyPad_4x4_adjustKeyNumber+0x3a>
    1d8c:	59 c0       	rjmp	.+178    	; 0x1e40 <KeyPad_4x4_adjustKeyNumber+0xec>
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	25 30       	cpi	r18, 0x05	; 5
    1d94:	31 05       	cpc	r19, r1
    1d96:	9c f4       	brge	.+38     	; 0x1dbe <KeyPad_4x4_adjustKeyNumber+0x6a>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <KeyPad_4x4_adjustKeyNumber+0x50>
    1da2:	48 c0       	rjmp	.+144    	; 0x1e34 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	23 30       	cpi	r18, 0x03	; 3
    1daa:	31 05       	cpc	r19, r1
    1dac:	0c f0       	brlt	.+2      	; 0x1db0 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1dae:	45 c0       	rjmp	.+138    	; 0x1e3a <KeyPad_4x4_adjustKeyNumber+0xe6>
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <KeyPad_4x4_adjustKeyNumber+0x68>
    1dba:	39 c0       	rjmp	.+114    	; 0x1e2e <KeyPad_4x4_adjustKeyNumber+0xda>
    1dbc:	67 c0       	rjmp	.+206    	; 0x1e8c <KeyPad_4x4_adjustKeyNumber+0x138>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	26 30       	cpi	r18, 0x06	; 6
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <KeyPad_4x4_adjustKeyNumber+0x76>
    1dc8:	41 c0       	rjmp	.+130    	; 0x1e4c <KeyPad_4x4_adjustKeyNumber+0xf8>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	87 30       	cpi	r24, 0x07	; 7
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <KeyPad_4x4_adjustKeyNumber+0x82>
    1dd4:	3e c0       	rjmp	.+124    	; 0x1e52 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1dd6:	37 c0       	rjmp	.+110    	; 0x1e46 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	2c 30       	cpi	r18, 0x0C	; 12
    1dde:	31 05       	cpc	r19, r1
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <KeyPad_4x4_adjustKeyNumber+0x90>
    1de2:	46 c0       	rjmp	.+140    	; 0x1e70 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	8d 30       	cpi	r24, 0x0D	; 13
    1dea:	91 05       	cpc	r25, r1
    1dec:	5c f4       	brge	.+22     	; 0x1e04 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	2a 30       	cpi	r18, 0x0A	; 10
    1df4:	31 05       	cpc	r19, r1
    1df6:	b1 f1       	breq	.+108    	; 0x1e64 <KeyPad_4x4_adjustKeyNumber+0x110>
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	8b 30       	cpi	r24, 0x0B	; 11
    1dfe:	91 05       	cpc	r25, r1
    1e00:	a4 f5       	brge	.+104    	; 0x1e6a <KeyPad_4x4_adjustKeyNumber+0x116>
    1e02:	2d c0       	rjmp	.+90     	; 0x1e5e <KeyPad_4x4_adjustKeyNumber+0x10a>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	2e 30       	cpi	r18, 0x0E	; 14
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	b9 f1       	breq	.+110    	; 0x1e7c <KeyPad_4x4_adjustKeyNumber+0x128>
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	8e 30       	cpi	r24, 0x0E	; 14
    1e14:	91 05       	cpc	r25, r1
    1e16:	7c f1       	brlt	.+94     	; 0x1e76 <KeyPad_4x4_adjustKeyNumber+0x122>
    1e18:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1c:	2f 30       	cpi	r18, 0x0F	; 15
    1e1e:	31 05       	cpc	r19, r1
    1e20:	79 f1       	breq	.+94     	; 0x1e80 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	80 31       	cpi	r24, 0x10	; 16
    1e28:	91 05       	cpc	r25, r1
    1e2a:	69 f1       	breq	.+90     	; 0x1e86 <KeyPad_4x4_adjustKeyNumber+0x132>
    1e2c:	2f c0       	rjmp	.+94     	; 0x1e8c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1e2e:	97 e0       	ldi	r25, 0x07	; 7
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	2e c0       	rjmp	.+92     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1e34:	28 e0       	ldi	r18, 0x08	; 8
    1e36:	2a 83       	std	Y+2, r18	; 0x02
    1e38:	2b c0       	rjmp	.+86     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1e3a:	39 e0       	ldi	r19, 0x09	; 9
    1e3c:	3a 83       	std	Y+2, r19	; 0x02
    1e3e:	28 c0       	rjmp	.+80     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1e40:	85 e2       	ldi	r24, 0x25	; 37
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	25 c0       	rjmp	.+74     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	22 c0       	rjmp	.+68     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1e4c:	25 e0       	ldi	r18, 0x05	; 5
    1e4e:	2a 83       	std	Y+2, r18	; 0x02
    1e50:	1f c0       	rjmp	.+62     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1e52:	36 e0       	ldi	r19, 0x06	; 6
    1e54:	3a 83       	std	Y+2, r19	; 0x02
    1e56:	1c c0       	rjmp	.+56     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1e58:	8a e2       	ldi	r24, 0x2A	; 42
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
    1e5c:	19 c0       	rjmp	.+50     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1e5e:	91 e0       	ldi	r25, 0x01	; 1
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	16 c0       	rjmp	.+44     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1e64:	22 e0       	ldi	r18, 0x02	; 2
    1e66:	2a 83       	std	Y+2, r18	; 0x02
    1e68:	13 c0       	rjmp	.+38     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1e6a:	33 e0       	ldi	r19, 0x03	; 3
    1e6c:	3a 83       	std	Y+2, r19	; 0x02
    1e6e:	10 c0       	rjmp	.+32     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1e70:	8d e2       	ldi	r24, 0x2D	; 45
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	0d c0       	rjmp	.+26     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1e76:	9d e0       	ldi	r25, 0x0D	; 13
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	0a c0       	rjmp	.+20     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1e7c:	1a 82       	std	Y+2, r1	; 0x02
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1e80:	2d e3       	ldi	r18, 0x3D	; 61
    1e82:	2a 83       	std	Y+2, r18	; 0x02
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1e86:	3b e2       	ldi	r19, 0x2B	; 43
    1e88:	3a 83       	std	Y+2, r19	; 0x02
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1ea8:	e7 e3       	ldi	r30, 0x37	; 55
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1eb0:	a1 e3       	ldi	r26, 0x31	; 49
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e1 e3       	ldi	r30, 0x31	; 49
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 67       	ori	r24, 0x70	; 112
    1ebc:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ebe:	88 e3       	ldi	r24, 0x38	; 56
    1ec0:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1ec4:	8c e0       	ldi	r24, 0x0C	; 12
    1ec6:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <LCD_sendCommand>
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	e9 97       	sbiw	r28, 0x39	; 57
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1eec:	a2 e3       	ldi	r26, 0x32	; 50
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e2 e3       	ldi	r30, 0x32	; 50
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8f 7e       	andi	r24, 0xEF	; 239
    1ef8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1efa:	a2 e3       	ldi	r26, 0x32	; 50
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e2 e3       	ldi	r30, 0x32	; 50
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7d       	andi	r24, 0xDF	; 223
    1f06:	8c 93       	st	X, r24
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e8       	ldi	r26, 0x80	; 128
    1f0e:	bf e3       	ldi	r27, 0x3F	; 63
    1f10:	8d ab       	std	Y+53, r24	; 0x35
    1f12:	9e ab       	std	Y+54, r25	; 0x36
    1f14:	af ab       	std	Y+55, r26	; 0x37
    1f16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	53 e4       	ldi	r21, 0x43	; 67
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	89 ab       	std	Y+49, r24	; 0x31
    1f32:	9a ab       	std	Y+50, r25	; 0x32
    1f34:	ab ab       	std	Y+51, r26	; 0x33
    1f36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f38:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <LCD_sendCommand+0x84>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	98 ab       	std	Y+48, r25	; 0x30
    1f56:	8f a7       	std	Y+47, r24	; 0x2f
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1f5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f60:	9c a9       	ldd	r25, Y+52	; 0x34
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6d a9       	ldd	r22, Y+53	; 0x35
    1f74:	7e a9       	ldd	r23, Y+54	; 0x36
    1f76:	8f a9       	ldd	r24, Y+55	; 0x37
    1f78:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	98 ab       	std	Y+48, r25	; 0x30
    1f98:	8f a7       	std	Y+47, r24	; 0x2f
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <LCD_sendCommand+0xe4>
    1f9c:	89 e1       	ldi	r24, 0x19	; 25
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e a7       	std	Y+46, r25	; 0x2e
    1fa2:	8d a7       	std	Y+45, r24	; 0x2d
    1fa4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_sendCommand+0xd2>
    1fac:	9e a7       	std	Y+46, r25	; 0x2e
    1fae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	98 ab       	std	Y+48, r25	; 0x30
    1fb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <LCD_sendCommand+0xc6>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fca:	9c a9       	ldd	r25, Y+52	; 0x34
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	98 ab       	std	Y+48, r25	; 0x30
    1fd6:	8f a7       	std	Y+47, r24	; 0x2f
    1fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fda:	98 a9       	ldd	r25, Y+48	; 0x30
    1fdc:	9c a7       	std	Y+44, r25	; 0x2c
    1fde:	8b a7       	std	Y+43, r24	; 0x2b
    1fe0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_sendCommand+0x10e>
    1fe8:	9c a7       	std	Y+44, r25	; 0x2c
    1fea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fec:	a2 e3       	ldi	r26, 0x32	; 50
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e2 e3       	ldi	r30, 0x32	; 50
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 64       	ori	r24, 0x40	; 64
    1ff8:	8c 93       	st	X, r24
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	bf e3       	ldi	r27, 0x3F	; 63
    2002:	8f a3       	std	Y+39, r24	; 0x27
    2004:	98 a7       	std	Y+40, r25	; 0x28
    2006:	a9 a7       	std	Y+41, r26	; 0x29
    2008:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	6f a1       	ldd	r22, Y+39	; 0x27
    200c:	78 a5       	ldd	r23, Y+40	; 0x28
    200e:	89 a5       	ldd	r24, Y+41	; 0x29
    2010:	9a a5       	ldd	r25, Y+42	; 0x2a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	4a e7       	ldi	r20, 0x7A	; 122
    2018:	53 e4       	ldi	r21, 0x43	; 67
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8b a3       	std	Y+35, r24	; 0x23
    2024:	9c a3       	std	Y+36, r25	; 0x24
    2026:	ad a3       	std	Y+37, r26	; 0x25
    2028:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    202a:	6b a1       	ldd	r22, Y+35	; 0x23
    202c:	7c a1       	ldd	r23, Y+36	; 0x24
    202e:	8d a1       	ldd	r24, Y+37	; 0x25
    2030:	9e a1       	ldd	r25, Y+38	; 0x26
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203e:	88 23       	and	r24, r24
    2040:	2c f4       	brge	.+10     	; 0x204c <LCD_sendCommand+0x176>
		__ticks = 1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	3f c0       	rjmp	.+126    	; 0x20ca <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    204c:	6b a1       	ldd	r22, Y+35	; 0x23
    204e:	7c a1       	ldd	r23, Y+36	; 0x24
    2050:	8d a1       	ldd	r24, Y+37	; 0x25
    2052:	9e a1       	ldd	r25, Y+38	; 0x26
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	57 e4       	ldi	r21, 0x47	; 71
    205c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	4c f5       	brge	.+82     	; 0x20b6 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2064:	6f a1       	ldd	r22, Y+39	; 0x27
    2066:	78 a5       	ldd	r23, Y+40	; 0x28
    2068:	89 a5       	ldd	r24, Y+41	; 0x29
    206a:	9a a5       	ldd	r25, Y+42	; 0x2a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <LCD_sendCommand+0x1d6>
    208e:	89 e1       	ldi	r24, 0x19	; 25
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	98 a3       	std	Y+32, r25	; 0x20
    2094:	8f 8f       	std	Y+31, r24	; 0x1f
    2096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2098:	98 a1       	ldd	r25, Y+32	; 0x20
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_sendCommand+0x1c4>
    209e:	98 a3       	std	Y+32, r25	; 0x20
    20a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	9a a3       	std	Y+34, r25	; 0x22
    20aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ac:	89 a1       	ldd	r24, Y+33	; 0x21
    20ae:	9a a1       	ldd	r25, Y+34	; 0x22
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	69 f7       	brne	.-38     	; 0x208e <LCD_sendCommand+0x1b8>
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	6b a1       	ldd	r22, Y+35	; 0x23
    20b8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ba:	8d a1       	ldd	r24, Y+37	; 0x25
    20bc:	9e a1       	ldd	r25, Y+38	; 0x26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9a a3       	std	Y+34, r25	; 0x22
    20c8:	89 a3       	std	Y+33, r24	; 0x21
    20ca:	89 a1       	ldd	r24, Y+33	; 0x21
    20cc:	9a a1       	ldd	r25, Y+34	; 0x22
    20ce:	9e 8f       	std	Y+30, r25	; 0x1e
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
    20d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_sendCommand+0x200>
    20da:	9e 8f       	std	Y+30, r25	; 0x1e
    20dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    20de:	e8 e3       	ldi	r30, 0x38	; 56
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	89 ad       	ldd	r24, Y+57	; 0x39
    20e4:	80 83       	st	Z, r24
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e8       	ldi	r26, 0x80	; 128
    20ec:	bf e3       	ldi	r27, 0x3F	; 63
    20ee:	89 8f       	std	Y+25, r24	; 0x19
    20f0:	9a 8f       	std	Y+26, r25	; 0x1a
    20f2:	ab 8f       	std	Y+27, r26	; 0x1b
    20f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	69 8d       	ldd	r22, Y+25	; 0x19
    20f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a e7       	ldi	r20, 0x7A	; 122
    2104:	53 e4       	ldi	r21, 0x43	; 67
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8d 8b       	std	Y+21, r24	; 0x15
    2110:	9e 8b       	std	Y+22, r25	; 0x16
    2112:	af 8b       	std	Y+23, r26	; 0x17
    2114:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2116:	6d 89       	ldd	r22, Y+21	; 0x15
    2118:	7e 89       	ldd	r23, Y+22	; 0x16
    211a:	8f 89       	ldd	r24, Y+23	; 0x17
    211c:	98 8d       	ldd	r25, Y+24	; 0x18
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <LCD_sendCommand+0x262>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 8b       	std	Y+20, r25	; 0x14
    2134:	8b 8b       	std	Y+19, r24	; 0x13
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    2138:	6d 89       	ldd	r22, Y+21	; 0x15
    213a:	7e 89       	ldd	r23, Y+22	; 0x16
    213c:	8f 89       	ldd	r24, Y+23	; 0x17
    213e:	98 8d       	ldd	r25, Y+24	; 0x18
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	69 8d       	ldd	r22, Y+25	; 0x19
    2152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9c 8b       	std	Y+20, r25	; 0x14
    2176:	8b 8b       	std	Y+19, r24	; 0x13
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <LCD_sendCommand+0x2c2>
    217a:	89 e1       	ldi	r24, 0x19	; 25
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
    2182:	89 89       	ldd	r24, Y+17	; 0x11
    2184:	9a 89       	ldd	r25, Y+18	; 0x12
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_sendCommand+0x2b0>
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8b 89       	ldd	r24, Y+19	; 0x13
    2190:	9c 89       	ldd	r25, Y+20	; 0x14
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8b 89       	ldd	r24, Y+19	; 0x13
    219a:	9c 89       	ldd	r25, Y+20	; 0x14
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <LCD_sendCommand+0x2a4>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9c 8b       	std	Y+20, r25	; 0x14
    21b4:	8b 8b       	std	Y+19, r24	; 0x13
    21b6:	8b 89       	ldd	r24, Y+19	; 0x13
    21b8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ba:	98 8b       	std	Y+16, r25	; 0x10
    21bc:	8f 87       	std	Y+15, r24	; 0x0f
    21be:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c0:	98 89       	ldd	r25, Y+16	; 0x10
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_sendCommand+0x2ec>
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21ca:	a2 e3       	ldi	r26, 0x32	; 50
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e2 e3       	ldi	r30, 0x32	; 50
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	8f 7b       	andi	r24, 0xBF	; 191
    21d6:	8c 93       	st	X, r24
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e8       	ldi	r26, 0x80	; 128
    21de:	bf e3       	ldi	r27, 0x3F	; 63
    21e0:	8b 87       	std	Y+11, r24	; 0x0b
    21e2:	9c 87       	std	Y+12, r25	; 0x0c
    21e4:	ad 87       	std	Y+13, r26	; 0x0d
    21e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	53 e4       	ldi	r21, 0x43	; 67
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8f 83       	std	Y+7, r24	; 0x07
    2202:	98 87       	std	Y+8, r25	; 0x08
    2204:	a9 87       	std	Y+9, r26	; 0x09
    2206:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_sendCommand+0x354>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    222a:	6f 81       	ldd	r22, Y+7	; 0x07
    222c:	78 85       	ldd	r23, Y+8	; 0x08
    222e:	89 85       	ldd	r24, Y+9	; 0x09
    2230:	9a 85       	ldd	r25, Y+10	; 0x0a
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	6b 85       	ldd	r22, Y+11	; 0x0b
    2244:	7c 85       	ldd	r23, Y+12	; 0x0c
    2246:	8d 85       	ldd	r24, Y+13	; 0x0d
    2248:	9e 85       	ldd	r25, Y+14	; 0x0e
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_sendCommand+0x3b4>
    226c:	89 e1       	ldi	r24, 0x19	; 25
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_sendCommand+0x3a2>
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_sendCommand+0x396>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	9a 81       	ldd	r25, Y+2	; 0x02
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_sendCommand+0x3de>
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    22bc:	e9 96       	adiw	r28, 0x39	; 57
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	e9 97       	sbiw	r28, 0x39	; 57
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    22e4:	a2 e3       	ldi	r26, 0x32	; 50
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e2 e3       	ldi	r30, 0x32	; 50
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 61       	ori	r24, 0x10	; 16
    22f0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    22f2:	a2 e3       	ldi	r26, 0x32	; 50
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e2 e3       	ldi	r30, 0x32	; 50
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8f 7d       	andi	r24, 0xDF	; 223
    22fe:	8c 93       	st	X, r24
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e8       	ldi	r26, 0x80	; 128
    2306:	bf e3       	ldi	r27, 0x3F	; 63
    2308:	8d ab       	std	Y+53, r24	; 0x35
    230a:	9e ab       	std	Y+54, r25	; 0x36
    230c:	af ab       	std	Y+55, r26	; 0x37
    230e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6d a9       	ldd	r22, Y+53	; 0x35
    2312:	7e a9       	ldd	r23, Y+54	; 0x36
    2314:	8f a9       	ldd	r24, Y+55	; 0x37
    2316:	98 ad       	ldd	r25, Y+56	; 0x38
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	53 e4       	ldi	r21, 0x43	; 67
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	89 ab       	std	Y+49, r24	; 0x31
    232a:	9a ab       	std	Y+50, r25	; 0x32
    232c:	ab ab       	std	Y+51, r26	; 0x33
    232e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2330:	69 a9       	ldd	r22, Y+49	; 0x31
    2332:	7a a9       	ldd	r23, Y+50	; 0x32
    2334:	8b a9       	ldd	r24, Y+51	; 0x33
    2336:	9c a9       	ldd	r25, Y+52	; 0x34
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_displayCharacter+0x84>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	98 ab       	std	Y+48, r25	; 0x30
    234e:	8f a7       	std	Y+47, r24	; 0x2f
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2352:	69 a9       	ldd	r22, Y+49	; 0x31
    2354:	7a a9       	ldd	r23, Y+50	; 0x32
    2356:	8b a9       	ldd	r24, Y+51	; 0x33
    2358:	9c a9       	ldd	r25, Y+52	; 0x34
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6d a9       	ldd	r22, Y+53	; 0x35
    236c:	7e a9       	ldd	r23, Y+54	; 0x36
    236e:	8f a9       	ldd	r24, Y+55	; 0x37
    2370:	98 ad       	ldd	r25, Y+56	; 0x38
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	98 ab       	std	Y+48, r25	; 0x30
    2390:	8f a7       	std	Y+47, r24	; 0x2f
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_displayCharacter+0xe4>
    2394:	89 e1       	ldi	r24, 0x19	; 25
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9e a7       	std	Y+46, r25	; 0x2e
    239a:	8d a7       	std	Y+45, r24	; 0x2d
    239c:	8d a5       	ldd	r24, Y+45	; 0x2d
    239e:	9e a5       	ldd	r25, Y+46	; 0x2e
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_displayCharacter+0xd2>
    23a4:	9e a7       	std	Y+46, r25	; 0x2e
    23a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23aa:	98 a9       	ldd	r25, Y+48	; 0x30
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	98 ab       	std	Y+48, r25	; 0x30
    23b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b4:	98 a9       	ldd	r25, Y+48	; 0x30
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_displayCharacter+0xc6>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	69 a9       	ldd	r22, Y+49	; 0x31
    23be:	7a a9       	ldd	r23, Y+50	; 0x32
    23c0:	8b a9       	ldd	r24, Y+51	; 0x33
    23c2:	9c a9       	ldd	r25, Y+52	; 0x34
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	98 ab       	std	Y+48, r25	; 0x30
    23ce:	8f a7       	std	Y+47, r24	; 0x2f
    23d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d2:	98 a9       	ldd	r25, Y+48	; 0x30
    23d4:	9c a7       	std	Y+44, r25	; 0x2c
    23d6:	8b a7       	std	Y+43, r24	; 0x2b
    23d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23da:	9c a5       	ldd	r25, Y+44	; 0x2c
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_displayCharacter+0x10e>
    23e0:	9c a7       	std	Y+44, r25	; 0x2c
    23e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    23e4:	a2 e3       	ldi	r26, 0x32	; 50
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e2 e3       	ldi	r30, 0x32	; 50
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 64       	ori	r24, 0x40	; 64
    23f0:	8c 93       	st	X, r24
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e8       	ldi	r26, 0x80	; 128
    23f8:	bf e3       	ldi	r27, 0x3F	; 63
    23fa:	8f a3       	std	Y+39, r24	; 0x27
    23fc:	98 a7       	std	Y+40, r25	; 0x28
    23fe:	a9 a7       	std	Y+41, r26	; 0x29
    2400:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6f a1       	ldd	r22, Y+39	; 0x27
    2404:	78 a5       	ldd	r23, Y+40	; 0x28
    2406:	89 a5       	ldd	r24, Y+41	; 0x29
    2408:	9a a5       	ldd	r25, Y+42	; 0x2a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a e7       	ldi	r20, 0x7A	; 122
    2410:	53 e4       	ldi	r21, 0x43	; 67
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8b a3       	std	Y+35, r24	; 0x23
    241c:	9c a3       	std	Y+36, r25	; 0x24
    241e:	ad a3       	std	Y+37, r26	; 0x25
    2420:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2422:	6b a1       	ldd	r22, Y+35	; 0x23
    2424:	7c a1       	ldd	r23, Y+36	; 0x24
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	9e a1       	ldd	r25, Y+38	; 0x26
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <LCD_displayCharacter+0x176>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9a a3       	std	Y+34, r25	; 0x22
    2440:	89 a3       	std	Y+33, r24	; 0x21
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6f a1       	ldd	r22, Y+39	; 0x27
    245e:	78 a5       	ldd	r23, Y+40	; 0x28
    2460:	89 a5       	ldd	r24, Y+41	; 0x29
    2462:	9a a5       	ldd	r25, Y+42	; 0x2a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9a a3       	std	Y+34, r25	; 0x22
    2482:	89 a3       	std	Y+33, r24	; 0x21
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <LCD_displayCharacter+0x1d6>
    2486:	89 e1       	ldi	r24, 0x19	; 25
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	98 a3       	std	Y+32, r25	; 0x20
    248c:	8f 8f       	std	Y+31, r24	; 0x1f
    248e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2490:	98 a1       	ldd	r25, Y+32	; 0x20
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_displayCharacter+0x1c4>
    2496:	98 a3       	std	Y+32, r25	; 0x20
    2498:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	89 a1       	ldd	r24, Y+33	; 0x21
    249c:	9a a1       	ldd	r25, Y+34	; 0x22
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9a a3       	std	Y+34, r25	; 0x22
    24a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	89 a1       	ldd	r24, Y+33	; 0x21
    24a6:	9a a1       	ldd	r25, Y+34	; 0x22
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <LCD_displayCharacter+0x1b8>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6b a1       	ldd	r22, Y+35	; 0x23
    24b0:	7c a1       	ldd	r23, Y+36	; 0x24
    24b2:	8d a1       	ldd	r24, Y+37	; 0x25
    24b4:	9e a1       	ldd	r25, Y+38	; 0x26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9a a3       	std	Y+34, r25	; 0x22
    24c0:	89 a3       	std	Y+33, r24	; 0x21
    24c2:	89 a1       	ldd	r24, Y+33	; 0x21
    24c4:	9a a1       	ldd	r25, Y+34	; 0x22
    24c6:	9e 8f       	std	Y+30, r25	; 0x1e
    24c8:	8d 8f       	std	Y+29, r24	; 0x1d
    24ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_displayCharacter+0x200>
    24d2:	9e 8f       	std	Y+30, r25	; 0x1e
    24d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    24d6:	e8 e3       	ldi	r30, 0x38	; 56
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	89 ad       	ldd	r24, Y+57	; 0x39
    24dc:	80 83       	st	Z, r24
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e8       	ldi	r26, 0x80	; 128
    24e4:	bf e3       	ldi	r27, 0x3F	; 63
    24e6:	89 8f       	std	Y+25, r24	; 0x19
    24e8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ea:	ab 8f       	std	Y+27, r26	; 0x1b
    24ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a e7       	ldi	r20, 0x7A	; 122
    24fc:	53 e4       	ldi	r21, 0x43	; 67
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8d 8b       	std	Y+21, r24	; 0x15
    2508:	9e 8b       	std	Y+22, r25	; 0x16
    250a:	af 8b       	std	Y+23, r26	; 0x17
    250c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250e:	6d 89       	ldd	r22, Y+21	; 0x15
    2510:	7e 89       	ldd	r23, Y+22	; 0x16
    2512:	8f 89       	ldd	r24, Y+23	; 0x17
    2514:	98 8d       	ldd	r25, Y+24	; 0x18
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <LCD_displayCharacter+0x262>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	69 8d       	ldd	r22, Y+25	; 0x19
    254a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <LCD_displayCharacter+0x2c2>
    2572:	89 e1       	ldi	r24, 0x19	; 25
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9a 8b       	std	Y+18, r25	; 0x12
    2578:	89 8b       	std	Y+17, r24	; 0x11
    257a:	89 89       	ldd	r24, Y+17	; 0x11
    257c:	9a 89       	ldd	r25, Y+18	; 0x12
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_displayCharacter+0x2b0>
    2582:	9a 8b       	std	Y+18, r25	; 0x12
    2584:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	8b 89       	ldd	r24, Y+19	; 0x13
    2588:	9c 89       	ldd	r25, Y+20	; 0x14
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9c 8b       	std	Y+20, r25	; 0x14
    258e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <LCD_displayCharacter+0x2a4>
    2598:	14 c0       	rjmp	.+40     	; 0x25c2 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	6d 89       	ldd	r22, Y+21	; 0x15
    259c:	7e 89       	ldd	r23, Y+22	; 0x16
    259e:	8f 89       	ldd	r24, Y+23	; 0x17
    25a0:	98 8d       	ldd	r25, Y+24	; 0x18
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9c 8b       	std	Y+20, r25	; 0x14
    25ac:	8b 8b       	std	Y+19, r24	; 0x13
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	98 8b       	std	Y+16, r25	; 0x10
    25b4:	8f 87       	std	Y+15, r24	; 0x0f
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	98 89       	ldd	r25, Y+16	; 0x10
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_displayCharacter+0x2ec>
    25be:	98 8b       	std	Y+16, r25	; 0x10
    25c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    25c2:	a2 e3       	ldi	r26, 0x32	; 50
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e2 e3       	ldi	r30, 0x32	; 50
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8f 7b       	andi	r24, 0xBF	; 191
    25ce:	8c 93       	st	X, r24
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e8       	ldi	r26, 0x80	; 128
    25d6:	bf e3       	ldi	r27, 0x3F	; 63
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <LCD_displayCharacter+0x3b4>
    2664:	89 e1       	ldi	r24, 0x19	; 25
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_displayCharacter+0x3a2>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <LCD_displayCharacter+0x396>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_displayCharacter+0x3de>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    26b4:	e9 96       	adiw	r28, 0x39	; 57
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <LCD_displayString+0x6>
    26cc:	0f 92       	push	r0
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	9b 83       	std	Y+3, r25	; 0x03
    26d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	0e c0       	rjmp	.+28     	; 0x26f6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	9b 81       	ldd	r25, Y+3	; 0x03
    26e4:	fc 01       	movw	r30, r24
    26e6:	e2 0f       	add	r30, r18
    26e8:	f3 1f       	adc	r31, r19
    26ea:	80 81       	ld	r24, Z
    26ec:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_displayCharacter>
		i++;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	fc 01       	movw	r30, r24
    2702:	e2 0f       	add	r30, r18
    2704:	f3 1f       	adc	r31, r19
    2706:	80 81       	ld	r24, Z
    2708:	88 23       	and	r24, r24
    270a:	39 f7       	brne	.-50     	; 0x26da <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	00 d0       	rcall	.+0      	; 0x271e <LCD_goToRowColumn+0x6>
    271e:	00 d0       	rcall	.+0      	; 0x2720 <LCD_goToRowColumn+0x8>
    2720:	0f 92       	push	r0
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	8a 83       	std	Y+2, r24	; 0x02
    2728:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	3d 83       	std	Y+5, r19	; 0x05
    2732:	2c 83       	std	Y+4, r18	; 0x04
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	9d 81       	ldd	r25, Y+5	; 0x05
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	91 05       	cpc	r25, r1
    273c:	c1 f0       	breq	.+48     	; 0x276e <LCD_goToRowColumn+0x56>
    273e:	2c 81       	ldd	r18, Y+4	; 0x04
    2740:	3d 81       	ldd	r19, Y+5	; 0x05
    2742:	22 30       	cpi	r18, 0x02	; 2
    2744:	31 05       	cpc	r19, r1
    2746:	2c f4       	brge	.+10     	; 0x2752 <LCD_goToRowColumn+0x3a>
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9d 81       	ldd	r25, Y+5	; 0x05
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	61 f0       	breq	.+24     	; 0x2768 <LCD_goToRowColumn+0x50>
    2750:	19 c0       	rjmp	.+50     	; 0x2784 <LCD_goToRowColumn+0x6c>
    2752:	2c 81       	ldd	r18, Y+4	; 0x04
    2754:	3d 81       	ldd	r19, Y+5	; 0x05
    2756:	22 30       	cpi	r18, 0x02	; 2
    2758:	31 05       	cpc	r19, r1
    275a:	69 f0       	breq	.+26     	; 0x2776 <LCD_goToRowColumn+0x5e>
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	83 30       	cpi	r24, 0x03	; 3
    2762:	91 05       	cpc	r25, r1
    2764:	61 f0       	breq	.+24     	; 0x277e <LCD_goToRowColumn+0x66>
    2766:	0e c0       	rjmp	.+28     	; 0x2784 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	0b c0       	rjmp	.+22     	; 0x2784 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	80 5c       	subi	r24, 0xC0	; 192
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	80 5f       	subi	r24, 0xF0	; 240
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	80 5b       	subi	r24, 0xB0	; 176
    2782:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	80 68       	ori	r24, 0x80	; 128
    2788:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <LCD_sendCommand>
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_displayStringRowColumn+0x6>
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <LCD_displayStringRowColumn+0x8>
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	6a 83       	std	Y+2, r22	; 0x02
    27ac:	5c 83       	std	Y+4, r21	; 0x04
    27ae:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	6a 81       	ldd	r22, Y+2	; 0x02
    27b4:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	0e 94 63 13 	call	0x26c6	; 0x26c6 <LCD_displayString>
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	62 97       	sbiw	r28, 0x12	; 18
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	9a 8b       	std	Y+18, r25	; 0x12
    27e4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    27e6:	89 89       	ldd	r24, Y+17	; 0x11
    27e8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ea:	9e 01       	movw	r18, r28
    27ec:	2f 5f       	subi	r18, 0xFF	; 255
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	b9 01       	movw	r22, r18
    27f2:	4a e0       	ldi	r20, 0x0A	; 10
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <itoa>
   LCD_displayString(buff);
    27fa:	ce 01       	movw	r24, r28
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	0e 94 63 13 	call	0x26c6	; 0x26c6 <LCD_displayString>
}
    2802:	62 96       	adiw	r28, 0x12	; 18
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <LCD_sendCommand>
}
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2830:	eb e2       	ldi	r30, 0x2B	; 43
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2838:	ea e2       	ldi	r30, 0x2A	; 42
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	88 e1       	ldi	r24, 0x18	; 24
    283e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2840:	e0 e4       	ldi	r30, 0x40	; 64
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	86 e8       	ldi	r24, 0x86	; 134
    2846:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2848:	e0 e4       	ldi	r30, 0x40	; 64
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    284e:	e9 e2       	ldi	r30, 0x29	; 41
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	8c e0       	ldi	r24, 0x0C	; 12
    2854:	80 83       	st	Z, r24
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	0f 92       	push	r0
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2868:	eb e2       	ldi	r30, 0x2B	; 43
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	80 72       	andi	r24, 0x20	; 32
    2874:	90 70       	andi	r25, 0x00	; 0
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	b9 f3       	breq	.-18     	; 0x2868 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    287a:	ec e2       	ldi	r30, 0x2C	; 44
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2892:	eb e2       	ldi	r30, 0x2B	; 43
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	88 23       	and	r24, r24
    289a:	dc f7       	brge	.-10     	; 0x2892 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    289c:	ec e2       	ldi	r30, 0x2C	; 44
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
}
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <UART_sendString+0x6>
    28ae:	0f 92       	push	r0
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9b 83       	std	Y+3, r25	; 0x03
    28b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28b8:	19 82       	std	Y+1, r1	; 0x01
    28ba:	0e c0       	rjmp	.+28     	; 0x28d8 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 0f       	add	r30, r18
    28ca:	f3 1f       	adc	r31, r19
    28cc:	80 81       	ld	r24, Z
    28ce:	0e 94 2e 14 	call	0x285c	; 0x285c <UART_sendByte>
		i++;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	80 81       	ld	r24, Z
    28ea:	88 23       	and	r24, r24
    28ec:	39 f7       	brne	.-50     	; 0x28bc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <UART_receiveString+0xa>
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9b 83       	std	Y+3, r25	; 0x03
    290c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    290e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	8c 01       	movw	r16, r24
    291c:	02 0f       	add	r16, r18
    291e:	13 1f       	adc	r17, r19
    2920:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    2924:	f8 01       	movw	r30, r16
    2926:	80 83       	st	Z, r24
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	8c 01       	movw	r16, r24
    293c:	02 0f       	add	r16, r18
    293e:	13 1f       	adc	r17, r19
    2940:	0e 94 45 14 	call	0x288a	; 0x288a <UART_recieveByte>
    2944:	f8 01       	movw	r30, r16
    2946:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	9b 81       	ldd	r25, Y+3	; 0x03
    2952:	fc 01       	movw	r30, r24
    2954:	e2 0f       	add	r30, r18
    2956:	f3 1f       	adc	r31, r19
    2958:	80 81       	ld	r24, Z
    295a:	83 32       	cpi	r24, 0x23	; 35
    295c:	31 f7       	brne	.-52     	; 0x292a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	fc 01       	movw	r30, r24
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	10 82       	st	Z, r1
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	08 95       	ret

00002980 <__prologue_saves__>:
    2980:	2f 92       	push	r2
    2982:	3f 92       	push	r3
    2984:	4f 92       	push	r4
    2986:	5f 92       	push	r5
    2988:	6f 92       	push	r6
    298a:	7f 92       	push	r7
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	ca 1b       	sub	r28, r26
    29aa:	db 0b       	sbc	r29, r27
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	09 94       	ijmp

000029b8 <__epilogue_restores__>:
    29b8:	2a 88       	ldd	r2, Y+18	; 0x12
    29ba:	39 88       	ldd	r3, Y+17	; 0x11
    29bc:	48 88       	ldd	r4, Y+16	; 0x10
    29be:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ca:	b9 84       	ldd	r11, Y+9	; 0x09
    29cc:	c8 84       	ldd	r12, Y+8	; 0x08
    29ce:	df 80       	ldd	r13, Y+7	; 0x07
    29d0:	ee 80       	ldd	r14, Y+6	; 0x06
    29d2:	fd 80       	ldd	r15, Y+5	; 0x05
    29d4:	0c 81       	ldd	r16, Y+4	; 0x04
    29d6:	1b 81       	ldd	r17, Y+3	; 0x03
    29d8:	aa 81       	ldd	r26, Y+2	; 0x02
    29da:	b9 81       	ldd	r27, Y+1	; 0x01
    29dc:	ce 0f       	add	r28, r30
    29de:	d1 1d       	adc	r29, r1
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	ed 01       	movw	r28, r26
    29ec:	08 95       	ret

000029ee <itoa>:
    29ee:	fb 01       	movw	r30, r22
    29f0:	9f 01       	movw	r18, r30
    29f2:	e8 94       	clt
    29f4:	42 30       	cpi	r20, 0x02	; 2
    29f6:	c4 f0       	brlt	.+48     	; 0x2a28 <itoa+0x3a>
    29f8:	45 32       	cpi	r20, 0x25	; 37
    29fa:	b4 f4       	brge	.+44     	; 0x2a28 <itoa+0x3a>
    29fc:	4a 30       	cpi	r20, 0x0A	; 10
    29fe:	29 f4       	brne	.+10     	; 0x2a0a <itoa+0x1c>
    2a00:	97 fb       	bst	r25, 7
    2a02:	1e f4       	brtc	.+6      	; 0x2a0a <itoa+0x1c>
    2a04:	90 95       	com	r25
    2a06:	81 95       	neg	r24
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	64 2f       	mov	r22, r20
    2a0c:	77 27       	eor	r23, r23
    2a0e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__udivmodhi4>
    2a12:	80 5d       	subi	r24, 0xD0	; 208
    2a14:	8a 33       	cpi	r24, 0x3A	; 58
    2a16:	0c f0       	brlt	.+2      	; 0x2a1a <itoa+0x2c>
    2a18:	89 5d       	subi	r24, 0xD9	; 217
    2a1a:	81 93       	st	Z+, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	a1 f7       	brne	.-24     	; 0x2a0a <itoa+0x1c>
    2a22:	16 f4       	brtc	.+4      	; 0x2a28 <itoa+0x3a>
    2a24:	5d e2       	ldi	r21, 0x2D	; 45
    2a26:	51 93       	st	Z+, r21
    2a28:	10 82       	st	Z, r1
    2a2a:	c9 01       	movw	r24, r18
    2a2c:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <strrev>

00002a30 <strrev>:
    2a30:	dc 01       	movw	r26, r24
    2a32:	fc 01       	movw	r30, r24
    2a34:	67 2f       	mov	r22, r23
    2a36:	71 91       	ld	r23, Z+
    2a38:	77 23       	and	r23, r23
    2a3a:	e1 f7       	brne	.-8      	; 0x2a34 <strrev+0x4>
    2a3c:	32 97       	sbiw	r30, 0x02	; 2
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <strrev+0x18>
    2a40:	7c 91       	ld	r23, X
    2a42:	6d 93       	st	X+, r22
    2a44:	70 83       	st	Z, r23
    2a46:	62 91       	ld	r22, -Z
    2a48:	ae 17       	cp	r26, r30
    2a4a:	bf 07       	cpc	r27, r31
    2a4c:	c8 f3       	brcs	.-14     	; 0x2a40 <strrev+0x10>
    2a4e:	08 95       	ret

00002a50 <__udivmodhi4>:
    2a50:	aa 1b       	sub	r26, r26
    2a52:	bb 1b       	sub	r27, r27
    2a54:	51 e1       	ldi	r21, 0x11	; 17
    2a56:	07 c0       	rjmp	.+14     	; 0x2a66 <__udivmodhi4_ep>

00002a58 <__udivmodhi4_loop>:
    2a58:	aa 1f       	adc	r26, r26
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	a6 17       	cp	r26, r22
    2a5e:	b7 07       	cpc	r27, r23
    2a60:	10 f0       	brcs	.+4      	; 0x2a66 <__udivmodhi4_ep>
    2a62:	a6 1b       	sub	r26, r22
    2a64:	b7 0b       	sbc	r27, r23

00002a66 <__udivmodhi4_ep>:
    2a66:	88 1f       	adc	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	5a 95       	dec	r21
    2a6c:	a9 f7       	brne	.-22     	; 0x2a58 <__udivmodhi4_loop>
    2a6e:	80 95       	com	r24
    2a70:	90 95       	com	r25
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	08 95       	ret

00002a78 <_exit>:
    2a78:	f8 94       	cli

00002a7a <__stop_program>:
    2a7a:	ff cf       	rjmp	.-2      	; 0x2a7a <__stop_program>
